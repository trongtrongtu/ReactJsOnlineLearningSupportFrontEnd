{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2020 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nexports.__esModule = true;\n\nvar Event_1 = require(\"./Event\");\n/**\n * Defines the following events:\n * - `signal`: dispatched by [[Session]] when a signal is received\n * - `signal:TYPE`: dispatched by [[Session]] when a signal of type TYPE is received\n */\n\n\nvar SignalEvent =\n/** @class */\nfunction (_super) {\n  __extends(SignalEvent, _super);\n  /**\n   * @hidden\n   */\n\n\n  function SignalEvent(target, type, data, from) {\n    var _this = _super.call(this, false, target, 'signal') || this;\n\n    if (!!type) {\n      _this.type = 'signal:' + type;\n    }\n\n    _this.data = data;\n    _this.from = from;\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n  // tslint:disable-next-line:no-empty\n\n\n  SignalEvent.prototype.callDefaultBehavior = function () {};\n\n  return SignalEvent;\n}(Event_1.Event);\n\nexports.SignalEvent = SignalEvent;","map":{"version":3,"sources":["../../../src/OpenViduInternal/Events/SignalEvent.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAKA;;;;;;;AAKA,IAAA,WAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiC,EAAA,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;AAuB7B;;;;;AAGA,WAAA,WAAA,CAAY,MAAZ,EAA6B,IAA7B,EAA2C,IAA3C,EAA0D,IAA1D,EAA2E;AAA3E,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,EAAa,MAAb,EAAqB,QAArB,KAA8B,IADlC;;AAEI,QAAI,CAAC,CAAC,IAAN,EAAY;AACR,MAAA,KAAI,CAAC,IAAL,GAAY,YAAY,IAAxB;AACH;;AACD,IAAA,KAAI,CAAC,IAAL,GAAY,IAAZ;AACA,IAAA,KAAI,CAAC,IAAL,GAAY,IAAZ;;AACH;AAED;;;AAGA;;;AACA,EAAA,WAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,YAAA,CAAyB,CAAzB;;AAEJ,SAAA,WAAA;AAAC,CAzCD,CAAiC,OAAA,CAAA,KAAjC,CAAA;;AAAa,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * (C) Copyright 2017-2020 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar Event_1 = require(\"./Event\");\n/**\n * Defines the following events:\n * - `signal`: dispatched by [[Session]] when a signal is received\n * - `signal:TYPE`: dispatched by [[Session]] when a signal of type TYPE is received\n */\nvar SignalEvent = /** @class */ (function (_super) {\n    __extends(SignalEvent, _super);\n    /**\n     * @hidden\n     */\n    function SignalEvent(target, type, data, from) {\n        var _this = _super.call(this, false, target, 'signal') || this;\n        if (!!type) {\n            _this.type = 'signal:' + type;\n        }\n        _this.data = data;\n        _this.from = from;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    SignalEvent.prototype.callDefaultBehavior = function () { };\n    return SignalEvent;\n}(Event_1.Event));\nexports.SignalEvent = SignalEvent;\n//# sourceMappingURL=SignalEvent.js.map"]},"metadata":{},"sourceType":"script"}