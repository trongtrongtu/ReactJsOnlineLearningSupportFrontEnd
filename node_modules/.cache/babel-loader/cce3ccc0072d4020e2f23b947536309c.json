{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2020 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nexports.__esModule = true;\n\nvar StreamPropertyChangedEvent_1 = require(\"../OpenViduInternal/Events/StreamPropertyChangedEvent\");\n\nvar OpenViduError_1 = require(\"../OpenViduInternal/Enums/OpenViduError\");\n\nvar OpenViduLogger_1 = require(\"../OpenViduInternal/Logger/OpenViduLogger\");\n/**\n * @hidden\n */\n\n\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * **WARNING**: experimental option. This interface may change in the near future\n *\n * Video/audio filter applied to a Stream. See [[Stream.applyFilter]]\n */\n\nvar Filter =\n/** @class */\nfunction () {\n  /**\n   * @hidden\n   */\n  function Filter(type, options) {\n    /**\n     * @hidden\n     */\n    this.handlers = {};\n    this.type = type;\n    this.options = options;\n  }\n  /**\n   * Executes a filter method. Available methods are specific for each filter\n   *\n   * @param method Name of the method\n   * @param params Parameters of the method\n   */\n\n\n  Filter.prototype.execMethod = function (method, params) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      logger.info('Executing filter method to stream ' + _this.stream.streamId);\n      var stringParams;\n\n      if (typeof params !== 'string') {\n        try {\n          stringParams = JSON.stringify(params);\n        } catch (error) {\n          var errorMsg = \"'params' property must be a JSON formatted object\";\n          logger.error(errorMsg);\n          reject(errorMsg);\n        }\n      } else {\n        stringParams = params;\n      }\n\n      _this.stream.session.openvidu.sendRequest('execFilterMethod', {\n        streamId: _this.stream.streamId,\n        method: method,\n        params: stringParams\n      }, function (error, response) {\n        if (error) {\n          logger.error('Error executing filter method for Stream ' + _this.stream.streamId, error);\n\n          if (error.code === 401) {\n            reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to execute a filter method\"));\n          } else {\n            reject(error);\n          }\n        } else {\n          logger.info('Filter method successfully executed on Stream ' + _this.stream.streamId);\n          var oldValue = Object.assign({}, _this.stream.filter);\n          _this.stream.filter.lastExecMethod = {\n            method: method,\n            params: JSON.parse(stringParams)\n          };\n\n          _this.stream.session.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.stream.session, _this.stream, 'filter', _this.stream.filter, oldValue, 'execFilterMethod')]);\n\n          _this.stream.streamManager.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.stream.streamManager, _this.stream, 'filter', _this.stream.filter, oldValue, 'execFilterMethod')]);\n\n          resolve();\n        }\n      });\n    });\n  };\n  /**\n   * Subscribe to certain filter event. Available events are specific for each filter\n   *\n   * @param eventType Event to which subscribe to.\n   * @param handler Function to execute upon event dispatched. It receives as parameter a [[FilterEvent]] object\n   *\n   * @returns A Promise (to which you can optionally subscribe to) that is resolved if the event listener was successfully attached to the filter and rejected with an Error object if not\n   */\n\n\n  Filter.prototype.addEventListener = function (eventType, handler) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      logger.info('Adding filter event listener to event ' + eventType + ' to stream ' + _this.stream.streamId);\n\n      _this.stream.session.openvidu.sendRequest('addFilterEventListener', {\n        streamId: _this.stream.streamId,\n        eventType: eventType\n      }, function (error, response) {\n        if (error) {\n          logger.error('Error adding filter event listener to event ' + eventType + 'for Stream ' + _this.stream.streamId, error);\n\n          if (error.code === 401) {\n            reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to add a filter event listener\"));\n          } else {\n            reject(error);\n          }\n        } else {\n          _this.handlers[eventType] = handler;\n          logger.info('Filter event listener to event ' + eventType + ' successfully applied on Stream ' + _this.stream.streamId);\n          resolve();\n        }\n      });\n    });\n  };\n  /**\n   * Removes certain filter event listener previously set.\n   *\n   * @param eventType Event to unsubscribe from.\n   *\n   * @returns A Promise (to which you can optionally subscribe to) that is resolved if the event listener was successfully removed from the filter and rejected with an Error object in other case\n   */\n\n\n  Filter.prototype.removeEventListener = function (eventType) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      logger.info('Removing filter event listener to event ' + eventType + ' to stream ' + _this.stream.streamId);\n\n      _this.stream.session.openvidu.sendRequest('removeFilterEventListener', {\n        streamId: _this.stream.streamId,\n        eventType: eventType\n      }, function (error, response) {\n        if (error) {\n          logger.error('Error removing filter event listener to event ' + eventType + 'for Stream ' + _this.stream.streamId, error);\n\n          if (error.code === 401) {\n            reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to add a filter event listener\"));\n          } else {\n            reject(error);\n          }\n        } else {\n          delete _this.handlers[eventType];\n          logger.info('Filter event listener to event ' + eventType + ' successfully removed on Stream ' + _this.stream.streamId);\n          resolve();\n        }\n      });\n    });\n  };\n\n  return Filter;\n}();\n\nexports.Filter = Filter;","map":{"version":3,"sources":["../../src/OpenVidu/Filter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * (C) Copyright 2017-2020 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nexports.__esModule = true;\nvar StreamPropertyChangedEvent_1 = require(\"../OpenViduInternal/Events/StreamPropertyChangedEvent\");\nvar OpenViduError_1 = require(\"../OpenViduInternal/Enums/OpenViduError\");\nvar OpenViduLogger_1 = require(\"../OpenViduInternal/Logger/OpenViduLogger\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * **WARNING**: experimental option. This interface may change in the near future\n *\n * Video/audio filter applied to a Stream. See [[Stream.applyFilter]]\n */\nvar Filter = /** @class */ (function () {\n    /**\n     * @hidden\n     */\n    function Filter(type, options) {\n        /**\n         * @hidden\n         */\n        this.handlers = {};\n        this.type = type;\n        this.options = options;\n    }\n    /**\n     * Executes a filter method. Available methods are specific for each filter\n     *\n     * @param method Name of the method\n     * @param params Parameters of the method\n     */\n    Filter.prototype.execMethod = function (method, params) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            logger.info('Executing filter method to stream ' + _this.stream.streamId);\n            var stringParams;\n            if (typeof params !== 'string') {\n                try {\n                    stringParams = JSON.stringify(params);\n                }\n                catch (error) {\n                    var errorMsg = \"'params' property must be a JSON formatted object\";\n                    logger.error(errorMsg);\n                    reject(errorMsg);\n                }\n            }\n            else {\n                stringParams = params;\n            }\n            _this.stream.session.openvidu.sendRequest('execFilterMethod', { streamId: _this.stream.streamId, method: method, params: stringParams }, function (error, response) {\n                if (error) {\n                    logger.error('Error executing filter method for Stream ' + _this.stream.streamId, error);\n                    if (error.code === 401) {\n                        reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to execute a filter method\"));\n                    }\n                    else {\n                        reject(error);\n                    }\n                }\n                else {\n                    logger.info('Filter method successfully executed on Stream ' + _this.stream.streamId);\n                    var oldValue = Object.assign({}, _this.stream.filter);\n                    _this.stream.filter.lastExecMethod = { method: method, params: JSON.parse(stringParams) };\n                    _this.stream.session.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.stream.session, _this.stream, 'filter', _this.stream.filter, oldValue, 'execFilterMethod')]);\n                    _this.stream.streamManager.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.stream.streamManager, _this.stream, 'filter', _this.stream.filter, oldValue, 'execFilterMethod')]);\n                    resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Subscribe to certain filter event. Available events are specific for each filter\n     *\n     * @param eventType Event to which subscribe to.\n     * @param handler Function to execute upon event dispatched. It receives as parameter a [[FilterEvent]] object\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved if the event listener was successfully attached to the filter and rejected with an Error object if not\n     */\n    Filter.prototype.addEventListener = function (eventType, handler) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            logger.info('Adding filter event listener to event ' + eventType + ' to stream ' + _this.stream.streamId);\n            _this.stream.session.openvidu.sendRequest('addFilterEventListener', { streamId: _this.stream.streamId, eventType: eventType }, function (error, response) {\n                if (error) {\n                    logger.error('Error adding filter event listener to event ' + eventType + 'for Stream ' + _this.stream.streamId, error);\n                    if (error.code === 401) {\n                        reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to add a filter event listener\"));\n                    }\n                    else {\n                        reject(error);\n                    }\n                }\n                else {\n                    _this.handlers[eventType] = handler;\n                    logger.info('Filter event listener to event ' + eventType + ' successfully applied on Stream ' + _this.stream.streamId);\n                    resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Removes certain filter event listener previously set.\n     *\n     * @param eventType Event to unsubscribe from.\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved if the event listener was successfully removed from the filter and rejected with an Error object in other case\n     */\n    Filter.prototype.removeEventListener = function (eventType) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            logger.info('Removing filter event listener to event ' + eventType + ' to stream ' + _this.stream.streamId);\n            _this.stream.session.openvidu.sendRequest('removeFilterEventListener', { streamId: _this.stream.streamId, eventType: eventType }, function (error, response) {\n                if (error) {\n                    logger.error('Error removing filter event listener to event ' + eventType + 'for Stream ' + _this.stream.streamId, error);\n                    if (error.code === 401) {\n                        reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to add a filter event listener\"));\n                    }\n                    else {\n                        reject(error);\n                    }\n                }\n                else {\n                    delete _this.handlers[eventType];\n                    logger.info('Filter event listener to event ' + eventType + ' successfully removed on Stream ' + _this.stream.streamId);\n                    resolve();\n                }\n            });\n        });\n    };\n    return Filter;\n}());\nexports.Filter = Filter;\n//# sourceMappingURL=Filter.js.map"]},"metadata":{},"sourceType":"script"}