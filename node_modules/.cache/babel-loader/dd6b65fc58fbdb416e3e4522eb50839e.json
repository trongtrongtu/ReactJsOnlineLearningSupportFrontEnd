{"ast":null,"code":"import _toConsumableArray from \"/media/tuanla/WORK_1/2019_2/CongNgheWeb/BTL/Code/FrontEnd/baitaplon_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/media/tuanla/WORK_1/2019_2/CongNgheWeb/BTL/Code/FrontEnd/baitaplon_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/media/tuanla/WORK_1/2019_2/CongNgheWeb/BTL/Code/FrontEnd/baitaplon_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/media/tuanla/WORK_1/2019_2/CongNgheWeb/BTL/Code/FrontEnd/baitaplon_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/media/tuanla/WORK_1/2019_2/CongNgheWeb/BTL/Code/FrontEnd/baitaplon_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/media/tuanla/WORK_1/2019_2/CongNgheWeb/BTL/Code/FrontEnd/baitaplon_frontend/src/Component/Chat/chat.js\";\nimport $ from 'jquery';\nimport Input from './input';\nimport _map from 'lodash/map';\nimport io from 'socket.io-client';\nimport React, { Component } from 'react';\nimport MessageList from './messageList';\nimport OnlineList from './online-list';\nimport Rooms from './rooms';\nimport './chat.css';\n\nvar chat = /*#__PURE__*/function (_Component) {\n  _inherits(chat, _Component);\n\n  var _super = _createSuper(chat);\n\n  function chat(props) {\n    var _this;\n\n    _classCallCheck(this, chat);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      messages: [],\n      // danh sách tin nhắn\n      user: {\n        id: '',\n        name: ''\n      },\n      // người dùng hiện tại, nếu rỗng sẽ hiển thị form login, có sẽ hiển thị phòng chat\n      userOnline: [],\n      // danh sách người dùng đang online\n      room: {\n        userName: 'tuan',\n        roomName: 'SessionA',\n        passRoom: '@'\n      } // room hien tai\n\n    };\n    _this.socket = null;\n    return _this;\n  }\n\n  _createClass(chat, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      console.log(this.state.user);\n      this.socket = io('localhost:3001');\n      this.socket.on('newMessage', function (response) {\n        _this2.newMessage(response);\n      }); //lắng nghe khi có tin nhắn mới\n\n      this.socket.on('loginFail', function (response) {\n        alert('Tên đã có người sử dụng');\n      }); //login fail\n\n      this.socket.on('loginSuccess', function (response) {\n        _this2.setState({\n          user: {\n            id: _this2.socket.id,\n            name: response.data\n          },\n          messages: response.messages\n        });\n      }); //đăng nhập thành công \n\n      this.socket.on('updateUesrList', function (response) {\n        _this2.setState({\n          userOnline: response\n        });\n      }); //update lại danh sách người dùng online khi có người đăng nhập hoặc đăng xuất\n    } //Khi có tin nhắn mới, sẽ push tin nhắn vào state mesgages, và nó sẽ được render ra màn hình\n\n  }, {\n    key: \"newMessage\",\n    value: function newMessage(m) {\n      var messages = this.state.messages;\n\n      var ids = _map(messages, 'id');\n\n      var max = Math.max.apply(Math, _toConsumableArray(ids));\n      messages.push({\n        id: max + 1,\n        userId: m.user.id,\n        message: m.data,\n        userName: m.user.name,\n        timeM: m.timeM,\n        roomName: m.roomName\n      });\n      var objMessage = $('.chat-message');\n\n      if (objMessage[0].scrollHeight - objMessage[0].scrollTop === objMessage[0].clientHeight) {\n        this.setState({\n          messages\n        });\n        objMessage.animate({\n          scrollTop: objMessage.prop('scrollHeight')\n        }, 1000); //tạo hiệu ứng cuộn khi có tin nhắn mới\n      } else {\n        this.setState({\n          messages\n        });\n\n        if (m.id === this.state.user) {\n          objMessage.animate({\n            scrollTop: objMessage.prop('scrollHeight')\n          }, 1000);\n        }\n      }\n    } //Gửi event socket newMessage với dữ liệu là nội dung tin nhắn và người gửi\n\n  }, {\n    key: \"sendnewMessage\",\n    value: function sendnewMessage(m) {\n      if (m.value) {\n        var today = new Date();\n        var timeM = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds() + \"   \" + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();\n        this.socket.emit(\"newMessage\", {\n          data: m.value,\n          user: this.state.user,\n          timeM: timeM,\n          roomName: this.state.room.roomName\n        }); //gửi event về server\n\n        m.value = \"\";\n      }\n    } //login để định danh người dùng\n\n  }, {\n    key: \"login\",\n    value: function login() {\n      this.socket.emit(\"login\", this.refs.name.value);\n    }\n  }, {\n    key: \"join_room\",\n    value: function join_room() {\n      this.socket.emit(\"join-room\", {\n        roomName: this.refs.room_name.value,\n        passRoom: this.refs.passRoom,\n        user: this.state.user\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"app__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        style: {\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      }, \" Room:\", this.state.room.roomName), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container bootstrap snippet\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-8 bg-white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(MessageList, {\n        messages: this.state.messages,\n        user: this.state.user,\n        typing: this.state.typing,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 30\n        }\n      }), /*#__PURE__*/React.createElement(Input, {\n        sendMessage: this.sendnewMessage.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 30\n        }\n      })), /*#__PURE__*/React.createElement(OnlineList, {\n        userOnline: this.state.userOnline,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }\n      }))));\n    }\n  }]);\n\n  return chat;\n}(Component);\n\nexport default chat;","map":{"version":3,"sources":["/media/tuanla/WORK_1/2019_2/CongNgheWeb/BTL/Code/FrontEnd/baitaplon_frontend/src/Component/Chat/chat.js"],"names":["$","Input","_map","io","React","Component","MessageList","OnlineList","Rooms","chat","props","state","messages","user","id","name","userOnline","room","userName","roomName","passRoom","socket","console","log","on","response","newMessage","alert","setState","data","m","ids","max","Math","push","userId","message","timeM","objMessage","scrollHeight","scrollTop","clientHeight","animate","prop","value","today","Date","getHours","getMinutes","getSeconds","getDate","getMonth","getFullYear","emit","refs","room_name","textAlign","typing","sendnewMessage","bind"],"mappings":"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","sourcesContent":["\nimport $ from 'jquery';\nimport Input from './input';\nimport _map from 'lodash/map';\nimport io from 'socket.io-client';\nimport React, { Component } from 'react';\nimport MessageList from './messageList';\nimport OnlineList from './online-list';\nimport Rooms from './rooms';\nimport './chat.css';\n\n\nclass chat extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [], // danh sách tin nhắn\n      user: { id: '', name: '' },// người dùng hiện tại, nếu rỗng sẽ hiển thị form login, có sẽ hiển thị phòng chat\n      userOnline: [], // danh sách người dùng đang online\n      room:{userName:'tuan',roomName:'SessionA',passRoom:'@'} // room hien tai\n      \n    }\n    this.socket = null;\n  }\n  componentWillMount() {\n    console.log(this.state.user)\n    this.socket = io('localhost:3001');\n    this.socket.on('newMessage', (response) => { this.newMessage(response) }); //lắng nghe khi có tin nhắn mới\n    this.socket.on('loginFail', (response) => { alert('Tên đã có người sử dụng') }); //login fail\n    this.socket.on('loginSuccess', (response) => { this.setState({ user: { id: this.socket.id, name: response.data }, messages: response.messages }) }); //đăng nhập thành công \n    this.socket.on('updateUesrList', (response) => { this.setState({ userOnline: response }) }); //update lại danh sách người dùng online khi có người đăng nhập hoặc đăng xuất\n  }\n  //Khi có tin nhắn mới, sẽ push tin nhắn vào state mesgages, và nó sẽ được render ra màn hình\n  newMessage(m) {\n    const messages = this.state.messages;\n    let ids = _map(messages, 'id');\n    let max = Math.max(...ids);\n\n    messages.push({\n      id: max + 1,\n      userId: m.user.id,\n      message: m.data,\n      userName: m.user.name,\n      timeM: m.timeM,\n      roomName:m.roomName\n    });\n    \n    \n    let objMessage = $('.chat-message');\n    if (objMessage[0].scrollHeight - objMessage[0].scrollTop === objMessage[0].clientHeight) {\n      this.setState({ messages });\n      objMessage.animate({ scrollTop: objMessage.prop('scrollHeight') }, 1000); //tạo hiệu ứng cuộn khi có tin nhắn mới\n\n    } else {\n      this.setState({ messages });\n      if (m.id === this.state.user) {\n        objMessage.animate({ scrollTop: objMessage.prop('scrollHeight') }, 1000);\n      }\n    }\n    \n  }\n  \n  //Gửi event socket newMessage với dữ liệu là nội dung tin nhắn và người gửi\n  sendnewMessage(m) {\n    if (m.value) {\n      let today = new Date();\n      let timeM = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds() + \"   \" + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();\n      this.socket.emit(\"newMessage\", { data: m.value, user: this.state.user,timeM:timeM,roomName:this.state.room.roomName }); //gửi event về server\n      m.value = \"\";\n    }\n  }\n  //login để định danh người dùng\n  login() {\n\n    this.socket.emit(\"login\",this.refs.name.value);\n\n  }\n\n  join_room() {\n    this.socket.emit(\"join-room\",{roomName: this.refs.room_name.value,passRoom:this.refs.passRoom,user:this.state.user});\n  }\n  \n  render() {\n    return (\n      <div className=\"app__content\">\n       \n       { /* kiểm tra xem user đã tồn tại hay chưa, nếu tồn tại thì render form chat, chưa thì render form login */}\n               <div><h2 style={{textAlign:'center'}} > Room:{this.state.room.roomName}</h2> </div>\n                <div className=\"container bootstrap snippet\" >\n\n                    <div className=\"row\"> \n                   \n                    {/* selected chat*/}\n                         <div className=\"col-md-8 bg-white\">\n                             <MessageList messages ={this.state.messages} user={this.state.user} typing={this.state.typing} ></MessageList>\n                             <Input sendMessage={this.sendnewMessage.bind(this)} ></Input>\n                         </div>\n                     {/* Danh sach online*/}\n                        <OnlineList userOnline={this.state.userOnline} ></OnlineList>\n\n                   \n                    </div>\n                </div>\n          </div>\n        \n   \n    )\n  }\n}\n\nexport default chat;"]},"metadata":{},"sourceType":"module"}