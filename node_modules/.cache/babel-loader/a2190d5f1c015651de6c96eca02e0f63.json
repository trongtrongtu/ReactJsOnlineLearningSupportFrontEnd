{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar OpenViduLogger =\n/** @class */\nfunction () {\n  function OpenViduLogger() {\n    this.logger = window.console;\n    this.LOG_FNS = [this.logger.log, this.logger.debug, this.logger.info, this.logger.warn, this.logger.error];\n    this.isProdMode = false;\n  }\n\n  OpenViduLogger.getInstance = function () {\n    if (!OpenViduLogger.instance) {\n      OpenViduLogger.instance = new OpenViduLogger();\n    }\n\n    return OpenViduLogger.instance;\n  };\n\n  OpenViduLogger.prototype.log = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this.isProdMode) {\n      this.LOG_FNS[0].apply(this.logger, arguments);\n    }\n  };\n\n  OpenViduLogger.prototype.debug = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this.isProdMode) {\n      this.LOG_FNS[1].apply(this.logger, arguments);\n    }\n  };\n\n  OpenViduLogger.prototype.info = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this.isProdMode) {\n      this.LOG_FNS[2].apply(this.logger, arguments);\n    }\n  };\n\n  OpenViduLogger.prototype.warn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this.isProdMode) {\n      this.LOG_FNS[3].apply(this.logger, arguments);\n    }\n  };\n\n  OpenViduLogger.prototype.error = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this.LOG_FNS[4].apply(this.logger, arguments);\n  };\n\n  OpenViduLogger.prototype.enableProdMode = function () {\n    this.isProdMode = true;\n  };\n\n  return OpenViduLogger;\n}();\n\nexports.OpenViduLogger = OpenViduLogger;","map":{"version":3,"sources":["../../../src/OpenViduInternal/Logger/OpenViduLogger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar OpenViduLogger = /** @class */ (function () {\n    function OpenViduLogger() {\n        this.logger = window.console;\n        this.LOG_FNS = [this.logger.log, this.logger.debug, this.logger.info, this.logger.warn, this.logger.error];\n        this.isProdMode = false;\n    }\n    OpenViduLogger.getInstance = function () {\n        if (!OpenViduLogger.instance) {\n            OpenViduLogger.instance = new OpenViduLogger();\n        }\n        return OpenViduLogger.instance;\n    };\n    OpenViduLogger.prototype.log = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this.isProdMode) {\n            this.LOG_FNS[0].apply(this.logger, arguments);\n        }\n    };\n    OpenViduLogger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this.isProdMode) {\n            this.LOG_FNS[1].apply(this.logger, arguments);\n        }\n    };\n    OpenViduLogger.prototype.info = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this.isProdMode) {\n            this.LOG_FNS[2].apply(this.logger, arguments);\n        }\n    };\n    OpenViduLogger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this.isProdMode) {\n            this.LOG_FNS[3].apply(this.logger, arguments);\n        }\n    };\n    OpenViduLogger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this.LOG_FNS[4].apply(this.logger, arguments);\n    };\n    OpenViduLogger.prototype.enableProdMode = function () {\n        this.isProdMode = true;\n    };\n    return OpenViduLogger;\n}());\nexports.OpenViduLogger = OpenViduLogger;\n//# sourceMappingURL=OpenViduLogger.js.map"]},"metadata":{},"sourceType":"script"}