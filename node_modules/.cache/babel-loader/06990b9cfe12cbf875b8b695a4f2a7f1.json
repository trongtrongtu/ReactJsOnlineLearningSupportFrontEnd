{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2020 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nexports.__esModule = true;\n\nvar Event_1 = require(\"./Event\");\n/**\n * Defines the following events:\n * - `streamPlaying`: dispatched by [[StreamManager]] ([[Publisher]] and [[Subscriber]]) whenever its media stream starts playing (one of its videos has media\n * and has begun to play). This event will be dispatched when these 3 conditions are met 1) The StreamManager has no video associated in the DOM 2) It is associated to one video 3) That video starts playing\n * - `streamAudioVolumeChange`: dispatched by [[StreamManager]] ([[Publisher]] and [[Subscriber]]) when the volume of its Stream's audio track\n * changes. Only applies if [[Stream.hasAudio]] is `true`. The frequency this event is fired with is defined by property `interval` of\n * [[OpenViduAdvancedConfiguration.publisherSpeakingEventsOptions]] (default 100ms)\n */\n\n\nvar StreamManagerEvent =\n/** @class */\nfunction (_super) {\n  __extends(StreamManagerEvent, _super);\n  /**\n   * @hidden\n   */\n\n\n  function StreamManagerEvent(target, type, value) {\n    var _this = _super.call(this, false, target, type) || this;\n\n    _this.value = value;\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n  // tslint:disable-next-line:no-empty\n\n\n  StreamManagerEvent.prototype.callDefaultBehavior = function () {};\n\n  return StreamManagerEvent;\n}(Event_1.Event);\n\nexports.StreamManagerEvent = StreamManagerEvent;","map":{"version":3,"sources":["../../../src/OpenViduInternal/Events/StreamManagerEvent.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAGA;;;;;;;;;;AAQA,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;AAWpC;;;;;AAGA,WAAA,kBAAA,CAAY,MAAZ,EAAmC,IAAnC,EAAiD,KAAjD,EAA0E;AAA1E,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,EAAa,MAAb,EAAqB,IAArB,KAA0B,IAD9B;;AAEI,IAAA,KAAI,CAAC,KAAL,GAAa,KAAb;;AACH;AAED;;;AAGA;;;AACA,EAAA,kBAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,YAAA,CAAyB,CAAzB;;AAEJ,SAAA,kBAAA;AAAC,CAzBD,CAAwC,OAAA,CAAA,KAAxC,CAAA;;AAAa,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * (C) Copyright 2017-2020 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar Event_1 = require(\"./Event\");\n/**\n * Defines the following events:\n * - `streamPlaying`: dispatched by [[StreamManager]] ([[Publisher]] and [[Subscriber]]) whenever its media stream starts playing (one of its videos has media\n * and has begun to play). This event will be dispatched when these 3 conditions are met 1) The StreamManager has no video associated in the DOM 2) It is associated to one video 3) That video starts playing\n * - `streamAudioVolumeChange`: dispatched by [[StreamManager]] ([[Publisher]] and [[Subscriber]]) when the volume of its Stream's audio track\n * changes. Only applies if [[Stream.hasAudio]] is `true`. The frequency this event is fired with is defined by property `interval` of\n * [[OpenViduAdvancedConfiguration.publisherSpeakingEventsOptions]] (default 100ms)\n */\nvar StreamManagerEvent = /** @class */ (function (_super) {\n    __extends(StreamManagerEvent, _super);\n    /**\n     * @hidden\n     */\n    function StreamManagerEvent(target, type, value) {\n        var _this = _super.call(this, false, target, type) || this;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    StreamManagerEvent.prototype.callDefaultBehavior = function () { };\n    return StreamManagerEvent;\n}(Event_1.Event));\nexports.StreamManagerEvent = StreamManagerEvent;\n//# sourceMappingURL=StreamManagerEvent.js.map"]},"metadata":{},"sourceType":"script"}