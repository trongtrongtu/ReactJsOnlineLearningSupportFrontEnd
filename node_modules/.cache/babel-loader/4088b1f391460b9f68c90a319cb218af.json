{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2020 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nexports.__esModule = true;\n\nvar Stream_1 = require(\"./Stream\");\n\nvar OpenViduLogger_1 = require(\"../OpenViduInternal/Logger/OpenViduLogger\");\n/**\n * @hidden\n */\n\n\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * Represents each one of the user's connection to the session (the local one and other user's connections).\n * Therefore each [[Session]] and [[Stream]] object has an attribute of type Connection\n */\n\nvar Connection =\n/** @class */\nfunction () {\n  /**\n   * @hidden\n   */\n  function Connection(session, opts) {\n    this.session = session;\n    /**\n     * @hidden\n     */\n\n    this.disposed = false;\n    var msg = \"'Connection' created \";\n\n    if (!!opts) {\n      // Connection is remote\n      msg += \"(remote) with 'connectionId' [\" + opts.id + ']';\n      this.options = opts;\n      this.connectionId = opts.id;\n      this.creationTime = opts.createdAt;\n\n      if (opts.metadata) {\n        this.data = opts.metadata;\n      }\n\n      if (opts.streams) {\n        this.initRemoteStreams(opts.streams);\n      }\n    } else {\n      // Connection is local\n      msg += '(local)';\n    }\n\n    logger.info(msg);\n  }\n  /* Hidden methods */\n\n  /**\n   * @hidden\n   */\n\n\n  Connection.prototype.sendIceCandidate = function (candidate) {\n    logger.debug((!!this.stream.outboundStreamOpts ? 'Local' : 'Remote') + 'candidate for' + this.connectionId, candidate);\n    this.session.openvidu.sendRequest('onIceCandidate', {\n      endpointName: this.connectionId,\n      candidate: candidate.candidate,\n      sdpMid: candidate.sdpMid,\n      sdpMLineIndex: candidate.sdpMLineIndex\n    }, function (error, response) {\n      if (error) {\n        logger.error('Error sending ICE candidate: ' + JSON.stringify(error));\n      }\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  Connection.prototype.initRemoteStreams = function (options) {\n    var _this = this; // This is ready for supporting multiple streams per Connection object. Right now the loop will always run just once\n    // this.stream should also be replaced by a collection of streams to support multiple streams per Connection\n\n\n    options.forEach(function (opts) {\n      var streamOptions = {\n        id: opts.id,\n        createdAt: opts.createdAt,\n        connection: _this,\n        hasAudio: opts.hasAudio,\n        hasVideo: opts.hasVideo,\n        audioActive: opts.audioActive,\n        videoActive: opts.videoActive,\n        typeOfVideo: opts.typeOfVideo,\n        frameRate: opts.frameRate,\n        videoDimensions: !!opts.videoDimensions ? JSON.parse(opts.videoDimensions) : undefined,\n        filter: !!opts.filter ? opts.filter : undefined\n      };\n      var stream = new Stream_1.Stream(_this.session, streamOptions);\n\n      _this.addStream(stream);\n    });\n    logger.info(\"Remote 'Connection' with 'connectionId' [\" + this.connectionId + '] is now configured for receiving Streams with options: ', this.stream.inboundStreamOpts);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Connection.prototype.addStream = function (stream) {\n    stream.connection = this;\n    this.stream = stream;\n  };\n  /**\n   * @hidden\n   */\n\n\n  Connection.prototype.removeStream = function (streamId) {\n    delete this.stream;\n  };\n  /**\n   * @hidden\n   */\n\n\n  Connection.prototype.dispose = function () {\n    if (!!this.stream) {\n      delete this.stream;\n    }\n\n    this.disposed = true;\n  };\n\n  return Connection;\n}();\n\nexports.Connection = Connection;","map":{"version":3,"sources":["../../src/OpenVidu/Connection.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;AAkBA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAIA,IAAA,gBAAA,GAAA,OAAA,CAAA,2CAAA,CAAA;AAEA;;;;;AAGA,IAAM,MAAM,GAAmB,gBAAA,CAAA,cAAA,CAAe,WAAf,EAA/B;AAGA;;;;;AAIA,IAAA,UAAA;AAAA;AAAA,YAAA;AAsCI;;;AAGA,WAAA,UAAA,CAAoB,OAApB,EAAsC,IAAtC,EAA8D;AAA1C,SAAA,OAAA,GAAA,OAAA;AAbpB;;;;AAGA,SAAA,QAAA,GAAW,KAAX;AAWI,QAAI,GAAG,GAAG,uBAAV;;AACA,QAAI,CAAC,CAAC,IAAN,EAAY;AACR;AACA,MAAA,GAAG,IAAI,mCAAmC,IAAI,CAAC,EAAxC,GAA6C,GAApD;AACA,WAAK,OAAL,GAAe,IAAf;AACA,WAAK,YAAL,GAAoB,IAAI,CAAC,EAAzB;AACA,WAAK,YAAL,GAAoB,IAAI,CAAC,SAAzB;;AACA,UAAI,IAAI,CAAC,QAAT,EAAmB;AACf,aAAK,IAAL,GAAY,IAAI,CAAC,QAAjB;AACH;;AACD,UAAI,IAAI,CAAC,OAAT,EAAkB;AACd,aAAK,iBAAL,CAAuB,IAAI,CAAC,OAA5B;AACH;AACJ,KAZD,MAYO;AACH;AACA,MAAA,GAAG,IAAI,SAAP;AACH;;AACD,IAAA,MAAM,CAAC,IAAP,CAAY,GAAZ;AACH;AAGD;;AAEA;;;;;AAGA,EAAA,UAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,SAAjB,EAA2C;AAEvC,IAAA,MAAM,CAAC,KAAP,CAAa,CAAC,CAAC,CAAC,KAAK,MAAL,CAAY,kBAAd,GAAmC,OAAnC,GAA6C,QAA9C,IAA0D,eAA1D,GACT,KAAK,YADT,EACuB,SADvB;AAGA,SAAK,OAAL,CAAa,QAAb,CAAsB,WAAtB,CAAkC,gBAAlC,EAAoD;AAChD,MAAA,YAAY,EAAE,KAAK,YAD6B;AAEhD,MAAA,SAAS,EAAE,SAAS,CAAC,SAF2B;AAGhD,MAAA,MAAM,EAAE,SAAS,CAAC,MAH8B;AAIhD,MAAA,aAAa,EAAE,SAAS,CAAC;AAJuB,KAApD,EAKG,UAAC,KAAD,EAAQ,QAAR,EAAgB;AACf,UAAI,KAAJ,EAAW;AACP,QAAA,MAAM,CAAC,KAAP,CAAa,kCACP,IAAI,CAAC,SAAL,CAAe,KAAf,CADN;AAEH;AACJ,KAVD;AAWH,GAhBD;AAkBA;;;;;AAGA,EAAA,UAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,OAAlB,EAAgD;AAAhD,QAAA,KAAA,GAAA,IAAA,CAAgD,CAE5C;AACA;;;AACA,IAAA,OAAO,CAAC,OAAR,CAAgB,UAAA,IAAA,EAAI;AAChB,UAAM,aAAa,GAAyB;AACxC,QAAA,EAAE,EAAE,IAAI,CAAC,EAD+B;AAExC,QAAA,SAAS,EAAE,IAAI,CAAC,SAFwB;AAGxC,QAAA,UAAU,EAAE,KAH4B;AAIxC,QAAA,QAAQ,EAAE,IAAI,CAAC,QAJyB;AAKxC,QAAA,QAAQ,EAAE,IAAI,CAAC,QALyB;AAMxC,QAAA,WAAW,EAAE,IAAI,CAAC,WANsB;AAOxC,QAAA,WAAW,EAAE,IAAI,CAAC,WAPsB;AAQxC,QAAA,WAAW,EAAE,IAAI,CAAC,WARsB;AASxC,QAAA,SAAS,EAAE,IAAI,CAAC,SATwB;AAUxC,QAAA,eAAe,EAAE,CAAC,CAAC,IAAI,CAAC,eAAP,GAAyB,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,eAAhB,CAAzB,GAA4D,SAVrC;AAWxC,QAAA,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,MAAP,GAAgB,IAAI,CAAC,MAArB,GAA8B;AAXE,OAA5C;AAaA,UAAM,MAAM,GAAG,IAAI,QAAA,CAAA,MAAJ,CAAW,KAAI,CAAC,OAAhB,EAAyB,aAAzB,CAAf;;AAEA,MAAA,KAAI,CAAC,SAAL,CAAe,MAAf;AACH,KAjBD;AAmBA,IAAA,MAAM,CAAC,IAAP,CAAY,8CAA8C,KAAK,YAAnD,GAAkE,0DAA9E,EAA0I,KAAK,MAAL,CAAY,iBAAtJ;AACH,GAxBD;AA0BA;;;;;AAGA,EAAA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,MAAV,EAAwB;AACpB,IAAA,MAAM,CAAC,UAAP,GAAoB,IAApB;AACA,SAAK,MAAL,GAAc,MAAd;AACH,GAHD;AAKA;;;;;AAGA,EAAA,UAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,QAAb,EAA6B;AACzB,WAAO,KAAK,MAAZ;AACH,GAFD;AAIA;;;;;AAGA,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACI,QAAI,CAAC,CAAC,KAAK,MAAX,EAAmB;AACf,aAAO,KAAK,MAAZ;AACH;;AACD,SAAK,QAAL,GAAgB,IAAhB;AACH,GALD;;AAOJ,SAAA,UAAA;AAAC,CA5ID,EAAA;;AAAa,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * (C) Copyright 2017-2020 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nexports.__esModule = true;\nvar Stream_1 = require(\"./Stream\");\nvar OpenViduLogger_1 = require(\"../OpenViduInternal/Logger/OpenViduLogger\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * Represents each one of the user's connection to the session (the local one and other user's connections).\n * Therefore each [[Session]] and [[Stream]] object has an attribute of type Connection\n */\nvar Connection = /** @class */ (function () {\n    /**\n     * @hidden\n     */\n    function Connection(session, opts) {\n        this.session = session;\n        /**\n         * @hidden\n         */\n        this.disposed = false;\n        var msg = \"'Connection' created \";\n        if (!!opts) {\n            // Connection is remote\n            msg += \"(remote) with 'connectionId' [\" + opts.id + ']';\n            this.options = opts;\n            this.connectionId = opts.id;\n            this.creationTime = opts.createdAt;\n            if (opts.metadata) {\n                this.data = opts.metadata;\n            }\n            if (opts.streams) {\n                this.initRemoteStreams(opts.streams);\n            }\n        }\n        else {\n            // Connection is local\n            msg += '(local)';\n        }\n        logger.info(msg);\n    }\n    /* Hidden methods */\n    /**\n     * @hidden\n     */\n    Connection.prototype.sendIceCandidate = function (candidate) {\n        logger.debug((!!this.stream.outboundStreamOpts ? 'Local' : 'Remote') + 'candidate for' +\n            this.connectionId, candidate);\n        this.session.openvidu.sendRequest('onIceCandidate', {\n            endpointName: this.connectionId,\n            candidate: candidate.candidate,\n            sdpMid: candidate.sdpMid,\n            sdpMLineIndex: candidate.sdpMLineIndex\n        }, function (error, response) {\n            if (error) {\n                logger.error('Error sending ICE candidate: '\n                    + JSON.stringify(error));\n            }\n        });\n    };\n    /**\n     * @hidden\n     */\n    Connection.prototype.initRemoteStreams = function (options) {\n        var _this = this;\n        // This is ready for supporting multiple streams per Connection object. Right now the loop will always run just once\n        // this.stream should also be replaced by a collection of streams to support multiple streams per Connection\n        options.forEach(function (opts) {\n            var streamOptions = {\n                id: opts.id,\n                createdAt: opts.createdAt,\n                connection: _this,\n                hasAudio: opts.hasAudio,\n                hasVideo: opts.hasVideo,\n                audioActive: opts.audioActive,\n                videoActive: opts.videoActive,\n                typeOfVideo: opts.typeOfVideo,\n                frameRate: opts.frameRate,\n                videoDimensions: !!opts.videoDimensions ? JSON.parse(opts.videoDimensions) : undefined,\n                filter: !!opts.filter ? opts.filter : undefined\n            };\n            var stream = new Stream_1.Stream(_this.session, streamOptions);\n            _this.addStream(stream);\n        });\n        logger.info(\"Remote 'Connection' with 'connectionId' [\" + this.connectionId + '] is now configured for receiving Streams with options: ', this.stream.inboundStreamOpts);\n    };\n    /**\n     * @hidden\n     */\n    Connection.prototype.addStream = function (stream) {\n        stream.connection = this;\n        this.stream = stream;\n    };\n    /**\n     * @hidden\n     */\n    Connection.prototype.removeStream = function (streamId) {\n        delete this.stream;\n    };\n    /**\n     * @hidden\n     */\n    Connection.prototype.dispose = function () {\n        if (!!this.stream) {\n            delete this.stream;\n        }\n        this.disposed = true;\n    };\n    return Connection;\n}());\nexports.Connection = Connection;\n//# sourceMappingURL=Connection.js.map"]},"metadata":{},"sourceType":"script"}