{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2020 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nexports.__esModule = true;\n\nvar Event_1 = require(\"./Event\");\n\nvar Publisher_1 = require(\"../../OpenVidu/Publisher\");\n\nvar Session_1 = require(\"../../OpenVidu/Session\");\n\nvar OpenViduLogger_1 = require(\"../Logger/OpenViduLogger\");\n/**\n * @hidden\n */\n\n\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * Defines the following events:\n * - `streamCreated`: dispatched by [[Session]] and [[Publisher]] after some user has started publishing to the session\n * - `streamDestroyed`: dispatched by [[Session]] and [[Publisher]] after some user has stopped publishing to the session\n */\n\nvar StreamEvent =\n/** @class */\nfunction (_super) {\n  __extends(StreamEvent, _super);\n  /**\n   * @hidden\n   */\n\n\n  function StreamEvent(cancelable, target, type, stream, reason) {\n    var _this = _super.call(this, cancelable, target, type) || this;\n\n    _this.stream = stream;\n    _this.reason = reason;\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  StreamEvent.prototype.callDefaultBehavior = function () {\n    if (this.type === 'streamDestroyed') {\n      if (this.target instanceof Session_1.Session) {\n        // Remote Stream\n        logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Session'\");\n        this.stream.disposeWebRtcPeer();\n      } else if (this.target instanceof Publisher_1.Publisher) {\n        // Local Stream\n        logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Publisher'\");\n        clearInterval(this.target.screenShareResizeInterval);\n        this.stream.isLocalStreamReadyToPublish = false; // Delete Publisher object from OpenVidu publishers array\n\n        var openviduPublishers = this.target.openvidu.publishers;\n\n        for (var i = 0; i < openviduPublishers.length; i++) {\n          if (openviduPublishers[i] === this.target) {\n            openviduPublishers.splice(i, 1);\n            break;\n          }\n        }\n      } // Dispose the MediaStream local object\n\n\n      this.stream.disposeMediaStream(); // Remove from DOM all video elements associated to this Stream, if there's a StreamManager defined\n      // (method Session.subscribe must have been called)\n\n      if (this.stream.streamManager) this.stream.streamManager.removeAllVideos(); // Delete stream from Session.remoteStreamsCreated map\n\n      delete this.stream.session.remoteStreamsCreated[this.stream.streamId]; // Delete StreamOptionsServer from remote Connection\n\n      var remoteConnection = this.stream.session.remoteConnections[this.stream.connection.connectionId];\n\n      if (!!remoteConnection && !!remoteConnection.options) {\n        var streamOptionsServer = remoteConnection.options.streams;\n\n        for (var i = streamOptionsServer.length - 1; i >= 0; --i) {\n          if (streamOptionsServer[i].id === this.stream.streamId) {\n            streamOptionsServer.splice(i, 1);\n          }\n        }\n      }\n    }\n  };\n\n  return StreamEvent;\n}(Event_1.Event);\n\nexports.StreamEvent = StreamEvent;","map":{"version":3,"sources":["../../../src/OpenViduInternal/Events/StreamEvent.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * (C) Copyright 2017-2020 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar Event_1 = require(\"./Event\");\nvar Publisher_1 = require(\"../../OpenVidu/Publisher\");\nvar Session_1 = require(\"../../OpenVidu/Session\");\nvar OpenViduLogger_1 = require(\"../Logger/OpenViduLogger\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * Defines the following events:\n * - `streamCreated`: dispatched by [[Session]] and [[Publisher]] after some user has started publishing to the session\n * - `streamDestroyed`: dispatched by [[Session]] and [[Publisher]] after some user has stopped publishing to the session\n */\nvar StreamEvent = /** @class */ (function (_super) {\n    __extends(StreamEvent, _super);\n    /**\n     * @hidden\n     */\n    function StreamEvent(cancelable, target, type, stream, reason) {\n        var _this = _super.call(this, cancelable, target, type) || this;\n        _this.stream = stream;\n        _this.reason = reason;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    StreamEvent.prototype.callDefaultBehavior = function () {\n        if (this.type === 'streamDestroyed') {\n            if (this.target instanceof Session_1.Session) {\n                // Remote Stream\n                logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Session'\");\n                this.stream.disposeWebRtcPeer();\n            }\n            else if (this.target instanceof Publisher_1.Publisher) {\n                // Local Stream\n                logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Publisher'\");\n                clearInterval(this.target.screenShareResizeInterval);\n                this.stream.isLocalStreamReadyToPublish = false;\n                // Delete Publisher object from OpenVidu publishers array\n                var openviduPublishers = this.target.openvidu.publishers;\n                for (var i = 0; i < openviduPublishers.length; i++) {\n                    if (openviduPublishers[i] === this.target) {\n                        openviduPublishers.splice(i, 1);\n                        break;\n                    }\n                }\n            }\n            // Dispose the MediaStream local object\n            this.stream.disposeMediaStream();\n            // Remove from DOM all video elements associated to this Stream, if there's a StreamManager defined\n            // (method Session.subscribe must have been called)\n            if (this.stream.streamManager)\n                this.stream.streamManager.removeAllVideos();\n            // Delete stream from Session.remoteStreamsCreated map\n            delete this.stream.session.remoteStreamsCreated[this.stream.streamId];\n            // Delete StreamOptionsServer from remote Connection\n            var remoteConnection = this.stream.session.remoteConnections[this.stream.connection.connectionId];\n            if (!!remoteConnection && !!remoteConnection.options) {\n                var streamOptionsServer = remoteConnection.options.streams;\n                for (var i = streamOptionsServer.length - 1; i >= 0; --i) {\n                    if (streamOptionsServer[i].id === this.stream.streamId) {\n                        streamOptionsServer.splice(i, 1);\n                    }\n                }\n            }\n        }\n    };\n    return StreamEvent;\n}(Event_1.Event));\nexports.StreamEvent = StreamEvent;\n//# sourceMappingURL=StreamEvent.js.map"]},"metadata":{},"sourceType":"script"}