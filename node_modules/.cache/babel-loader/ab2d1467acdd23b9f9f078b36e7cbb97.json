{"ast":null,"code":"window.getScreenId = function (firefoxString, callback, custom_parameter) {\n  if (navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob)) {\n    callback({\n      video: true\n    });\n    return;\n  }\n\n  if (!!navigator.mozGetUserMedia) {\n    callback(null, 'firefox', {\n      video: {\n        mozMediaSource: firefoxString,\n        mediaSource: firefoxString\n      }\n    });\n    return;\n  }\n\n  window.addEventListener('message', onIFrameCallback);\n\n  function onIFrameCallback(event) {\n    if (!event.data) return;\n\n    if (event.data.chromeMediaSourceId) {\n      if (event.data.chromeMediaSourceId === 'PermissionDeniedError') {\n        callback('permission-denied');\n      } else {\n        callback(null, event.data.chromeMediaSourceId, getScreenConstraints(null, event.data.chromeMediaSourceId, event.data.canRequestAudioTrack));\n      }\n\n      window.removeEventListener('message', onIFrameCallback);\n    }\n\n    if (event.data.chromeExtensionStatus) {\n      callback(event.data.chromeExtensionStatus, null, getScreenConstraints(event.data.chromeExtensionStatus));\n      window.removeEventListener('message', onIFrameCallback);\n    }\n  }\n\n  if (!custom_parameter) {\n    setTimeout(postGetSourceIdMessage, 100);\n  } else {\n    setTimeout(function () {\n      postGetSourceIdMessage(custom_parameter);\n    }, 100);\n  }\n};\n\nfunction getScreenConstraints(error, sourceId, canRequestAudioTrack) {\n  var screen_constraints = {\n    audio: false,\n    video: {\n      mandatory: {\n        chromeMediaSource: error ? 'screen' : 'desktop',\n        maxWidth: window.screen.width > 1920 ? window.screen.width : 1920,\n        maxHeight: window.screen.height > 1080 ? window.screen.height : 1080\n      },\n      optional: []\n    }\n  };\n\n  if (!!canRequestAudioTrack) {\n    screen_constraints.audio = {\n      mandatory: {\n        chromeMediaSource: error ? 'screen' : 'desktop'\n      },\n      optional: []\n    };\n  }\n\n  if (sourceId) {\n    screen_constraints.video.mandatory.chromeMediaSourceId = sourceId;\n\n    if (screen_constraints.audio && screen_constraints.audio.mandatory) {\n      screen_constraints.audio.mandatory.chromeMediaSourceId = sourceId;\n    }\n  }\n\n  return screen_constraints;\n}\n\nfunction postGetSourceIdMessage(custom_parameter) {\n  if (!iframe) {\n    loadIFrame(function () {\n      postGetSourceIdMessage(custom_parameter);\n    });\n    return;\n  }\n\n  if (!iframe.isLoaded) {\n    setTimeout(function () {\n      postGetSourceIdMessage(custom_parameter);\n    }, 100);\n    return;\n  }\n\n  if (!custom_parameter) {\n    iframe.contentWindow.postMessage({\n      captureSourceId: true\n    }, '*');\n  } else if (!!custom_parameter.forEach) {\n    iframe.contentWindow.postMessage({\n      captureCustomSourceId: custom_parameter\n    }, '*');\n  } else {\n    iframe.contentWindow.postMessage({\n      captureSourceIdWithAudio: true\n    }, '*');\n  }\n}\n\nvar iframe;\n\nwindow.getScreenConstraints = function (callback) {\n  loadIFrame(function () {\n    getScreenId(function (error, sourceId, screen_constraints) {\n      if (!screen_constraints) {\n        screen_constraints = {\n          video: true\n        };\n      }\n\n      callback(error, screen_constraints.video);\n    });\n  });\n};\n\nfunction loadIFrame(loadCallback) {\n  if (iframe) {\n    loadCallback();\n    return;\n  }\n\n  iframe = document.createElement('iframe');\n\n  iframe.onload = function () {\n    iframe.isLoaded = true;\n    loadCallback();\n  };\n\n  iframe.src = 'https://openvidu.github.io/openvidu-screen-sharing-chrome-extension/';\n  iframe.style.display = 'none';\n  (document.body || document.documentElement).appendChild(iframe);\n}\n\nwindow.getChromeExtensionStatus = function (callback) {\n  if (!!navigator.mozGetUserMedia) {\n    callback('installed-enabled');\n    return;\n  }\n\n  window.addEventListener('message', onIFrameCallback);\n\n  function onIFrameCallback(event) {\n    if (!event.data) return;\n\n    if (event.data.chromeExtensionStatus) {\n      callback(event.data.chromeExtensionStatus);\n      window.removeEventListener('message', onIFrameCallback);\n    }\n  }\n\n  setTimeout(postGetChromeExtensionStatusMessage, 100);\n};\n\nfunction postGetChromeExtensionStatusMessage() {\n  if (!iframe) {\n    loadIFrame(postGetChromeExtensionStatusMessage);\n    return;\n  }\n\n  if (!iframe.isLoaded) {\n    setTimeout(postGetChromeExtensionStatusMessage, 100);\n    return;\n  }\n\n  iframe.contentWindow.postMessage({\n    getChromeExtensionStatus: true\n  }, '*');\n}\n\nexports.getScreenId = getScreenId;","map":{"version":3,"sources":["../../../src/OpenViduInternal/ScreenSharing/Screen-Capturing-Auto.js"],"names":[],"mappings":"AAyBA,MAAM,CAAC,WAAP,GAAqB,UAAU,aAAV,EAAyB,QAAzB,EAAmC,gBAAnC,EAAmD;AACpE,MAAI,SAAS,CAAC,SAAV,CAAoB,OAApB,CAA4B,MAA5B,MAAwC,CAAC,CAAzC,KAA+C,CAAC,CAAC,SAAS,CAAC,gBAAZ,IAAgC,CAAC,CAAC,SAAS,CAAC,UAA3F,CAAJ,EAA4G;AAExG,IAAA,QAAQ,CAAC;AACL,MAAA,KAAK,EAAE;AADF,KAAD,CAAR;AAGA;AACH;;AAKD,MAAI,CAAC,CAAC,SAAS,CAAC,eAAhB,EAAiC;AAC7B,IAAA,QAAQ,CAAC,IAAD,EAAO,SAAP,EAAkB;AACtB,MAAA,KAAK,EAAE;AACH,QAAA,cAAc,EAAE,aADb;AAEH,QAAA,WAAW,EAAE;AAFV;AADe,KAAlB,CAAR;AAMA;AACH;;AAED,EAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,gBAAnC;;AAEA,WAAS,gBAAT,CAA0B,KAA1B,EAA+B;AAC3B,QAAI,CAAC,KAAK,CAAC,IAAX,EAAiB;;AAEjB,QAAI,KAAK,CAAC,IAAN,CAAW,mBAAf,EAAoC;AAChC,UAAI,KAAK,CAAC,IAAN,CAAW,mBAAX,KAAmC,uBAAvC,EAAgE;AAC5D,QAAA,QAAQ,CAAC,mBAAD,CAAR;AACH,OAFD,MAEO;AACH,QAAA,QAAQ,CAAC,IAAD,EAAO,KAAK,CAAC,IAAN,CAAW,mBAAlB,EAAuC,oBAAoB,CAAC,IAAD,EAAO,KAAK,CAAC,IAAN,CAAW,mBAAlB,EAAuC,KAAK,CAAC,IAAN,CAAW,oBAAlD,CAA3D,CAAR;AACH;;AAGD,MAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,gBAAtC;AACH;;AAED,QAAI,KAAK,CAAC,IAAN,CAAW,qBAAf,EAAsC;AAClC,MAAA,QAAQ,CAAC,KAAK,CAAC,IAAN,CAAW,qBAAZ,EAAmC,IAAnC,EAAyC,oBAAoB,CAAC,KAAK,CAAC,IAAN,CAAW,qBAAZ,CAA7D,CAAR;AAGA,MAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,gBAAtC;AACH;AACJ;;AAED,MAAI,CAAC,gBAAL,EAAuB;AACnB,IAAA,UAAU,CAAC,sBAAD,EAAyB,GAAzB,CAAV;AACH,GAFD,MAGK;AACD,IAAA,UAAU,CAAC,YAAA;AACP,MAAA,sBAAsB,CAAC,gBAAD,CAAtB;AACH,KAFS,EAEP,GAFO,CAAV;AAGH;AACJ,CAtDD;;AAwDA,SAAS,oBAAT,CAA8B,KAA9B,EAAqC,QAArC,EAA+C,oBAA/C,EAAmE;AAC/D,MAAI,kBAAkB,GAAG;AACrB,IAAA,KAAK,EAAE,KADc;AAErB,IAAA,KAAK,EAAE;AACH,MAAA,SAAS,EAAE;AACP,QAAA,iBAAiB,EAAE,KAAK,GAAG,QAAH,GAAc,SAD/B;AAEP,QAAA,QAAQ,EAAE,MAAM,CAAC,MAAP,CAAc,KAAd,GAAsB,IAAtB,GAA6B,MAAM,CAAC,MAAP,CAAc,KAA3C,GAAmD,IAFtD;AAGP,QAAA,SAAS,EAAE,MAAM,CAAC,MAAP,CAAc,MAAd,GAAuB,IAAvB,GAA8B,MAAM,CAAC,MAAP,CAAc,MAA5C,GAAqD;AAHzD,OADR;AAMH,MAAA,QAAQ,EAAE;AANP;AAFc,GAAzB;;AAYA,MAAI,CAAC,CAAC,oBAAN,EAA4B;AACxB,IAAA,kBAAkB,CAAC,KAAnB,GAA2B;AACvB,MAAA,SAAS,EAAE;AACP,QAAA,iBAAiB,EAAE,KAAK,GAAG,QAAH,GAAc;AAD/B,OADY;AAKvB,MAAA,QAAQ,EAAE;AALa,KAA3B;AAOH;;AAED,MAAI,QAAJ,EAAc;AACV,IAAA,kBAAkB,CAAC,KAAnB,CAAyB,SAAzB,CAAmC,mBAAnC,GAAyD,QAAzD;;AAEA,QAAI,kBAAkB,CAAC,KAAnB,IAA4B,kBAAkB,CAAC,KAAnB,CAAyB,SAAzD,EAAoE;AAChE,MAAA,kBAAkB,CAAC,KAAnB,CAAyB,SAAzB,CAAmC,mBAAnC,GAAyD,QAAzD;AACH;AACJ;;AAED,SAAO,kBAAP;AACH;;AAED,SAAS,sBAAT,CAAgC,gBAAhC,EAAgD;AAC5C,MAAI,CAAC,MAAL,EAAa;AACT,IAAA,UAAU,CAAC,YAAA;AACP,MAAA,sBAAsB,CAAC,gBAAD,CAAtB;AACH,KAFS,CAAV;AAGA;AACH;;AAED,MAAI,CAAC,MAAM,CAAC,QAAZ,EAAsB;AAClB,IAAA,UAAU,CAAC,YAAA;AACP,MAAA,sBAAsB,CAAC,gBAAD,CAAtB;AACH,KAFS,EAEP,GAFO,CAAV;AAGA;AACH;;AAED,MAAI,CAAC,gBAAL,EAAuB;AACnB,IAAA,MAAM,CAAC,aAAP,CAAqB,WAArB,CAAiC;AAC7B,MAAA,eAAe,EAAE;AADY,KAAjC,EAEG,GAFH;AAGH,GAJD,MAKK,IAAI,CAAC,CAAC,gBAAgB,CAAC,OAAvB,EAAgC;AACjC,IAAA,MAAM,CAAC,aAAP,CAAqB,WAArB,CAAiC;AAC7B,MAAA,qBAAqB,EAAE;AADM,KAAjC,EAEG,GAFH;AAGH,GAJI,MAKA;AACD,IAAA,MAAM,CAAC,aAAP,CAAqB,WAArB,CAAiC;AAC7B,MAAA,wBAAwB,EAAE;AADG,KAAjC,EAEG,GAFH;AAGH;AACJ;;AAED,IAAI,MAAJ;;AAGA,MAAM,CAAC,oBAAP,GAA8B,UAAU,QAAV,EAAkB;AAC5C,EAAA,UAAU,CAAC,YAAA;AACP,IAAA,WAAW,CAAC,UAAU,KAAV,EAAiB,QAAjB,EAA2B,kBAA3B,EAA6C;AACrD,UAAI,CAAC,kBAAL,EAAyB;AACrB,QAAA,kBAAkB,GAAG;AACjB,UAAA,KAAK,EAAE;AADU,SAArB;AAGH;;AAED,MAAA,QAAQ,CAAC,KAAD,EAAQ,kBAAkB,CAAC,KAA3B,CAAR;AACH,KARU,CAAX;AASH,GAVS,CAAV;AAWH,CAZD;;AAcA,SAAS,UAAT,CAAoB,YAApB,EAAgC;AAC5B,MAAI,MAAJ,EAAY;AACR,IAAA,YAAY;AACZ;AACH;;AAED,EAAA,MAAM,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAT;;AACA,EAAA,MAAM,CAAC,MAAP,GAAgB,YAAA;AACZ,IAAA,MAAM,CAAC,QAAP,GAAkB,IAAlB;AACA,IAAA,YAAY;AACf,GAHD;;AAIA,EAAA,MAAM,CAAC,GAAP,GAAa,sEAAb;AACA,EAAA,MAAM,CAAC,KAAP,CAAa,OAAb,GAAuB,MAAvB;AACA,GAAC,QAAQ,CAAC,IAAT,IAAiB,QAAQ,CAAC,eAA3B,EAA4C,WAA5C,CAAwD,MAAxD;AACH;;AAED,MAAM,CAAC,wBAAP,GAAkC,UAAU,QAAV,EAAkB;AAEhD,MAAI,CAAC,CAAC,SAAS,CAAC,eAAhB,EAAiC;AAC7B,IAAA,QAAQ,CAAC,mBAAD,CAAR;AACA;AACH;;AAED,EAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,gBAAnC;;AAEA,WAAS,gBAAT,CAA0B,KAA1B,EAA+B;AAC3B,QAAI,CAAC,KAAK,CAAC,IAAX,EAAiB;;AAEjB,QAAI,KAAK,CAAC,IAAN,CAAW,qBAAf,EAAsC;AAClC,MAAA,QAAQ,CAAC,KAAK,CAAC,IAAN,CAAW,qBAAZ,CAAR;AAGA,MAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,gBAAtC;AACH;AACJ;;AAED,EAAA,UAAU,CAAC,mCAAD,EAAsC,GAAtC,CAAV;AACH,CArBD;;AAuBA,SAAS,mCAAT,GAA4C;AACxC,MAAI,CAAC,MAAL,EAAa;AACT,IAAA,UAAU,CAAC,mCAAD,CAAV;AACA;AACH;;AAED,MAAI,CAAC,MAAM,CAAC,QAAZ,EAAsB;AAClB,IAAA,UAAU,CAAC,mCAAD,EAAsC,GAAtC,CAAV;AACA;AACH;;AAED,EAAA,MAAM,CAAC,aAAP,CAAqB,WAArB,CAAiC;AAC7B,IAAA,wBAAwB,EAAE;AADG,GAAjC,EAEG,GAFH;AAGH;;AAED,OAAO,CAAC,WAAR,GAAsB,WAAtB","sourceRoot":"","sourcesContent":["window.getScreenId = function (firefoxString, callback, custom_parameter) {\n    if (navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob)) {\n        callback({\n            video: true\n        });\n        return;\n    }\n    if (!!navigator.mozGetUserMedia) {\n        callback(null, 'firefox', {\n            video: {\n                mozMediaSource: firefoxString,\n                mediaSource: firefoxString\n            }\n        });\n        return;\n    }\n    window.addEventListener('message', onIFrameCallback);\n    function onIFrameCallback(event) {\n        if (!event.data)\n            return;\n        if (event.data.chromeMediaSourceId) {\n            if (event.data.chromeMediaSourceId === 'PermissionDeniedError') {\n                callback('permission-denied');\n            }\n            else {\n                callback(null, event.data.chromeMediaSourceId, getScreenConstraints(null, event.data.chromeMediaSourceId, event.data.canRequestAudioTrack));\n            }\n            window.removeEventListener('message', onIFrameCallback);\n        }\n        if (event.data.chromeExtensionStatus) {\n            callback(event.data.chromeExtensionStatus, null, getScreenConstraints(event.data.chromeExtensionStatus));\n            window.removeEventListener('message', onIFrameCallback);\n        }\n    }\n    if (!custom_parameter) {\n        setTimeout(postGetSourceIdMessage, 100);\n    }\n    else {\n        setTimeout(function () {\n            postGetSourceIdMessage(custom_parameter);\n        }, 100);\n    }\n};\nfunction getScreenConstraints(error, sourceId, canRequestAudioTrack) {\n    var screen_constraints = {\n        audio: false,\n        video: {\n            mandatory: {\n                chromeMediaSource: error ? 'screen' : 'desktop',\n                maxWidth: window.screen.width > 1920 ? window.screen.width : 1920,\n                maxHeight: window.screen.height > 1080 ? window.screen.height : 1080\n            },\n            optional: []\n        }\n    };\n    if (!!canRequestAudioTrack) {\n        screen_constraints.audio = {\n            mandatory: {\n                chromeMediaSource: error ? 'screen' : 'desktop',\n            },\n            optional: []\n        };\n    }\n    if (sourceId) {\n        screen_constraints.video.mandatory.chromeMediaSourceId = sourceId;\n        if (screen_constraints.audio && screen_constraints.audio.mandatory) {\n            screen_constraints.audio.mandatory.chromeMediaSourceId = sourceId;\n        }\n    }\n    return screen_constraints;\n}\nfunction postGetSourceIdMessage(custom_parameter) {\n    if (!iframe) {\n        loadIFrame(function () {\n            postGetSourceIdMessage(custom_parameter);\n        });\n        return;\n    }\n    if (!iframe.isLoaded) {\n        setTimeout(function () {\n            postGetSourceIdMessage(custom_parameter);\n        }, 100);\n        return;\n    }\n    if (!custom_parameter) {\n        iframe.contentWindow.postMessage({\n            captureSourceId: true\n        }, '*');\n    }\n    else if (!!custom_parameter.forEach) {\n        iframe.contentWindow.postMessage({\n            captureCustomSourceId: custom_parameter\n        }, '*');\n    }\n    else {\n        iframe.contentWindow.postMessage({\n            captureSourceIdWithAudio: true\n        }, '*');\n    }\n}\nvar iframe;\nwindow.getScreenConstraints = function (callback) {\n    loadIFrame(function () {\n        getScreenId(function (error, sourceId, screen_constraints) {\n            if (!screen_constraints) {\n                screen_constraints = {\n                    video: true\n                };\n            }\n            callback(error, screen_constraints.video);\n        });\n    });\n};\nfunction loadIFrame(loadCallback) {\n    if (iframe) {\n        loadCallback();\n        return;\n    }\n    iframe = document.createElement('iframe');\n    iframe.onload = function () {\n        iframe.isLoaded = true;\n        loadCallback();\n    };\n    iframe.src = 'https://openvidu.github.io/openvidu-screen-sharing-chrome-extension/';\n    iframe.style.display = 'none';\n    (document.body || document.documentElement).appendChild(iframe);\n}\nwindow.getChromeExtensionStatus = function (callback) {\n    if (!!navigator.mozGetUserMedia) {\n        callback('installed-enabled');\n        return;\n    }\n    window.addEventListener('message', onIFrameCallback);\n    function onIFrameCallback(event) {\n        if (!event.data)\n            return;\n        if (event.data.chromeExtensionStatus) {\n            callback(event.data.chromeExtensionStatus);\n            window.removeEventListener('message', onIFrameCallback);\n        }\n    }\n    setTimeout(postGetChromeExtensionStatusMessage, 100);\n};\nfunction postGetChromeExtensionStatusMessage() {\n    if (!iframe) {\n        loadIFrame(postGetChromeExtensionStatusMessage);\n        return;\n    }\n    if (!iframe.isLoaded) {\n        setTimeout(postGetChromeExtensionStatusMessage, 100);\n        return;\n    }\n    iframe.contentWindow.postMessage({\n        getChromeExtensionStatus: true\n    }, '*');\n}\nexports.getScreenId = getScreenId;\n//# sourceMappingURL=Screen-Capturing-Auto.js.map"]},"metadata":{},"sourceType":"script"}