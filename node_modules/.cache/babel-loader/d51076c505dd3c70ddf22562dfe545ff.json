{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2020 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nexports.__esModule = true;\n\nvar LocalRecorder_1 = require(\"./LocalRecorder\");\n\nvar Publisher_1 = require(\"./Publisher\");\n\nvar Session_1 = require(\"./Session\");\n\nvar StreamPropertyChangedEvent_1 = require(\"../OpenViduInternal/Events/StreamPropertyChangedEvent\");\n\nvar OpenViduError_1 = require(\"../OpenViduInternal/Enums/OpenViduError\");\n\nvar VideoInsertMode_1 = require(\"../OpenViduInternal/Enums/VideoInsertMode\");\n\nvar screenSharingAuto = require(\"../OpenViduInternal/ScreenSharing/Screen-Capturing-Auto\");\n\nvar screenSharing = require(\"../OpenViduInternal/ScreenSharing/Screen-Capturing\");\n/**\n * @hidden\n */\n\n\nvar EventEmitter = require(\"wolfy87-eventemitter\");\n/**\n * @hidden\n */\n\n\nvar RpcBuilder = require(\"../OpenViduInternal/KurentoUtils/kurento-jsonrpc\");\n/**\n * @hidden\n */\n\n\nvar platform = require(\"platform\");\n\nplatform['isIonicIos'] = (platform.product === 'iPhone' || platform.product === 'iPad') && platform.ua.indexOf('Safari') === -1;\nplatform['isIonicAndroid'] = platform.os.family === 'Android' && platform.name == \"Android Browser\";\n/**\n * @hidden\n */\n\nvar packageJson = require('../../package.json');\n/**\n * Entrypoint of OpenVidu Browser library.\n * Use it to initialize objects of type [[Session]], [[Publisher]] and [[LocalRecorder]]\n */\n\n\nvar OpenVidu =\n/** @class */\nfunction () {\n  function OpenVidu() {\n    var _this = this;\n    /**\n     * @hidden\n     */\n\n\n    this.publishers = [];\n    /**\n     * @hidden\n     */\n\n    this.secret = '';\n    /**\n     * @hidden\n     */\n\n    this.recorder = false;\n    /**\n     * @hidden\n     */\n\n    this.advancedConfiguration = {};\n    /**\n     * @hidden\n     */\n\n    this.webrtcStatsInterval = 0;\n    /**\n     * @hidden\n     */\n\n    this.ee = new EventEmitter();\n    this.libraryVersion = packageJson.version;\n    console.info(\"'OpenVidu' initialized\");\n    console.info(\"openvidu-browser version: \" + this.libraryVersion);\n\n    if (platform.os.family === 'iOS' || platform.os.family === 'Android') {\n      // Listen to orientationchange only on mobile devices\n      window.addEventListener('orientationchange', function () {\n        _this.publishers.forEach(function (publisher) {\n          if (publisher.stream.isLocalStreamPublished && !!publisher.stream && !!publisher.stream.hasVideo && !!publisher.stream.streamManager.videos[0]) {\n            var attempts_1 = 0;\n            var oldWidth_1 = publisher.stream.videoDimensions.width;\n            var oldHeight_1 = publisher.stream.videoDimensions.height;\n\n            var getNewVideoDimensions_1 = function getNewVideoDimensions_1() {\n              return new Promise(function (resolve, reject) {\n                if (platform['isIonicIos']) {\n                  // iOS Ionic. Limitation: must get new dimensions from an existing video element already inserted into DOM\n                  resolve({\n                    newWidth: publisher.stream.streamManager.videos[0].video.videoWidth,\n                    newHeight: publisher.stream.streamManager.videos[0].video.videoHeight\n                  });\n                } else {\n                  // Rest of platforms\n                  // New resolution got from different places for Chrome and Firefox. Chrome needs a videoWidth and videoHeight of a videoElement.\n                  // Firefox needs getSettings from the videoTrack\n                  var firefoxSettings = publisher.stream.getMediaStream().getVideoTracks()[0].getSettings();\n                  var newWidth = platform.name.toLowerCase().indexOf('firefox') !== -1 ? firefoxSettings.width : publisher.videoReference.videoWidth;\n                  var newHeight = platform.name.toLowerCase().indexOf('firefox') !== -1 ? firefoxSettings.height : publisher.videoReference.videoHeight;\n                  resolve({\n                    newWidth: newWidth,\n                    newHeight: newHeight\n                  });\n                }\n              });\n            };\n\n            var repeatUntilChange_1 = setInterval(function () {\n              getNewVideoDimensions_1().then(function (newDimensions) {\n                sendStreamPropertyChangedEvent_1(oldWidth_1, oldHeight_1, newDimensions.newWidth, newDimensions.newHeight);\n              });\n            }, 75);\n\n            var sendStreamPropertyChangedEvent_1 = function sendStreamPropertyChangedEvent_1(oldWidth, oldHeight, newWidth, newHeight) {\n              attempts_1++;\n\n              if (attempts_1 > 10) {\n                clearTimeout(repeatUntilChange_1);\n              }\n\n              if (newWidth !== oldWidth || newHeight !== oldHeight) {\n                publisher.stream.videoDimensions = {\n                  width: newWidth || 0,\n                  height: newHeight || 0\n                };\n\n                _this.sendRequest('streamPropertyChanged', {\n                  streamId: publisher.stream.streamId,\n                  property: 'videoDimensions',\n                  newValue: JSON.stringify(publisher.stream.videoDimensions),\n                  reason: 'deviceRotated'\n                }, function (error, response) {\n                  if (error) {\n                    console.error(\"Error sending 'streamPropertyChanged' event\", error);\n                  } else {\n                    _this.session.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.session, publisher.stream, 'videoDimensions', publisher.stream.videoDimensions, {\n                      width: oldWidth,\n                      height: oldHeight\n                    }, 'deviceRotated')]);\n\n                    publisher.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(publisher, publisher.stream, 'videoDimensions', publisher.stream.videoDimensions, {\n                      width: oldWidth,\n                      height: oldHeight\n                    }, 'deviceRotated')]);\n                  }\n                });\n\n                clearTimeout(repeatUntilChange_1);\n              }\n            };\n          }\n        });\n      });\n    }\n  }\n  /**\n   * Returns new session\n   */\n\n\n  OpenVidu.prototype.initSession = function () {\n    this.session = new Session_1.Session(this);\n    return this.session;\n  };\n  /**\n   * Returns a new publisher\n   *\n   * #### Events dispatched\n   *\n   * The [[Publisher]] object will dispatch an `accessDialogOpened` event, only if the pop-up shown by the browser to request permissions for the camera is opened. You can use this event to alert the user about granting permissions\n   * for your website. An `accessDialogClosed` event will also be dispatched after user clicks on \"Allow\" or \"Block\" in the pop-up.\n   *\n   * The [[Publisher]] object will dispatch an `accessAllowed` or `accessDenied` event once it has been granted access to the requested input devices or not.\n   *\n   * The [[Publisher]] object will dispatch a `videoElementCreated` event once a HTML video element has been added to DOM (only if you\n   * [let OpenVidu take care of the video players](/docs/how-do-i/manage-videos/#let-openvidu-take-care-of-the-video-players)). See [[VideoElementEvent]] to learn more.\n   *\n   * The [[Publisher]] object will dispatch a `streamPlaying` event once the local streams starts playing. See [[StreamManagerEvent]] to learn more.\n   *\n   * @param targetElement  HTML DOM element (or its `id` attribute) in which the video element of the Publisher will be inserted (see [[PublisherProperties.insertMode]]). If *null* or *undefined* no default video will be created for this Publisher.\n   * You can always call method [[Publisher.addVideoElement]] or [[Publisher.createVideoElement]] to manage the video elements on your own (see [Manage video players](/docs/how-do-i/manage-videos) section)\n   * @param completionHandler `error` parameter is null if `initPublisher` succeeds, and is defined if it fails.\n   *                          `completionHandler` function is called before the Publisher dispatches an `accessAllowed` or an `accessDenied` event\n   */\n\n\n  OpenVidu.prototype.initPublisher = function (targetElement, param2, param3) {\n    var properties;\n\n    if (!!param2 && typeof param2 !== 'function') {\n      // Matches 'initPublisher(targetElement, properties)' or 'initPublisher(targetElement, properties, completionHandler)'\n      properties = param2;\n      properties = {\n        audioSource: typeof properties.audioSource !== 'undefined' ? properties.audioSource : undefined,\n        frameRate: typeof MediaStreamTrack !== 'undefined' && properties.videoSource instanceof MediaStreamTrack ? undefined : typeof properties.frameRate !== 'undefined' ? properties.frameRate : undefined,\n        insertMode: typeof properties.insertMode !== 'undefined' ? typeof properties.insertMode === 'string' ? VideoInsertMode_1.VideoInsertMode[properties.insertMode] : properties.insertMode : VideoInsertMode_1.VideoInsertMode.APPEND,\n        mirror: typeof properties.mirror !== 'undefined' ? properties.mirror : true,\n        publishAudio: typeof properties.publishAudio !== 'undefined' ? properties.publishAudio : true,\n        publishVideo: typeof properties.publishVideo !== 'undefined' ? properties.publishVideo : true,\n        resolution: typeof MediaStreamTrack !== 'undefined' && properties.videoSource instanceof MediaStreamTrack ? undefined : typeof properties.resolution !== 'undefined' ? properties.resolution : '640x480',\n        videoSource: typeof properties.videoSource !== 'undefined' ? properties.videoSource : undefined,\n        filter: properties.filter\n      };\n    } else {\n      // Matches 'initPublisher(targetElement)' or 'initPublisher(targetElement, completionHandler)'\n      properties = {\n        insertMode: VideoInsertMode_1.VideoInsertMode.APPEND,\n        mirror: true,\n        publishAudio: true,\n        publishVideo: true,\n        resolution: '640x480'\n      };\n    }\n\n    var publisher = new Publisher_1.Publisher(targetElement, properties, this);\n    var completionHandler;\n\n    if (!!param2 && typeof param2 === 'function') {\n      completionHandler = param2;\n    } else if (!!param3) {\n      completionHandler = param3;\n    }\n\n    publisher.initialize().then(function () {\n      if (completionHandler !== undefined) {\n        completionHandler(undefined);\n      }\n\n      publisher.emitEvent('accessAllowed', []);\n    })[\"catch\"](function (error) {\n      if (completionHandler !== undefined) {\n        completionHandler(error);\n      }\n\n      publisher.emitEvent('accessDenied', [error]);\n    });\n    this.publishers.push(publisher);\n    return publisher;\n  };\n\n  OpenVidu.prototype.initPublisherAsync = function (targetElement, properties) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var publisher;\n\n      var callback = function callback(error) {\n        if (!!error) {\n          reject(error);\n        } else {\n          resolve(publisher);\n        }\n      };\n\n      if (!!properties) {\n        publisher = _this.initPublisher(targetElement, properties, callback);\n      } else {\n        publisher = _this.initPublisher(targetElement, callback);\n      }\n    });\n  };\n  /**\n   * Returns a new local recorder for recording streams straight away from the browser\n   * @param stream  Stream to record\n   */\n\n\n  OpenVidu.prototype.initLocalRecorder = function (stream) {\n    return new LocalRecorder_1.LocalRecorder(stream);\n  };\n  /**\n   * Checks if the browser supports OpenVidu\n   * @returns 1 if the browser supports OpenVidu, 0 otherwise\n   */\n\n\n  OpenVidu.prototype.checkSystemRequirements = function () {\n    var browser = platform.name;\n    var family = platform.os.family;\n    var userAgent = !!platform.ua ? platform.ua : navigator.userAgent; // Reject iPhones and iPads if not Safari ('Safari' also covers Ionic for iOS)\n\n    if (family === 'iOS' && (browser !== 'Safari' || userAgent.indexOf('CriOS') !== -1 || userAgent.indexOf('FxiOS') !== -1)) {\n      return 0;\n    } // Accept: Chrome (desktop and Android), Firefox (desktop and Android), Opera (desktop and Android),\n    // Safari (OSX and iOS), Ionic (Android and iOS)\n\n\n    if (browser !== 'Safari' && browser !== 'Chrome' && browser !== 'Chrome Mobile' && browser !== 'Firefox' && browser !== 'Firefox Mobile' && browser !== 'Opera' && browser !== 'Opera Mobile' && browser !== 'Android Browser' && browser !== 'Electron') {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n  /**\n   * Checks if the browser supports screen-sharing. Desktop Chrome, Firefox and Opera support screen-sharing\n   * @returns 1 if the browser supports screen-sharing, 0 otherwise\n   */\n\n\n  OpenVidu.prototype.checkScreenSharingCapabilities = function () {\n    var browser = platform.name;\n    var family = platform.os.family; // Reject mobile devices\n\n    if (family === 'iOS' || family === 'Android') {\n      return 0;\n    }\n\n    if (browser !== 'Chrome' && browser !== 'Firefox' && browser !== 'Opera' && browser !== 'Electron') {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n  /**\n   * Collects information about the media input devices available on the system. You can pass property `deviceId` of a [[Device]] object as value of `audioSource` or `videoSource` properties in [[initPublisher]] method\n   */\n\n\n  OpenVidu.prototype.getDevices = function () {\n    return new Promise(function (resolve, reject) {\n      navigator.mediaDevices.enumerateDevices().then(function (deviceInfos) {\n        var devices = []; // Ionic Android  devices\n\n        if (platform['isIonicAndroid'] && cordova.plugins && cordova.plugins.EnumerateDevicesPlugin) {\n          cordova.plugins.EnumerateDevicesPlugin.getEnumerateDevices().then(function (pluginDevices) {\n            var pluginAudioDevices = [];\n            var videoDevices = [];\n            var audioDevices = [];\n            pluginAudioDevices = pluginDevices.filter(function (device) {\n              return device.kind === 'audioinput';\n            });\n            videoDevices = deviceInfos.filter(function (device) {\n              return device.kind === 'videoinput';\n            });\n            audioDevices = deviceInfos.filter(function (device) {\n              return device.kind === 'audioinput';\n            });\n            videoDevices.forEach(function (deviceInfo, index) {\n              if (!deviceInfo.label) {\n                var label = \"\";\n\n                if (index === 0) {\n                  label = \"Front Camera\";\n                } else if (index === 1) {\n                  label = \"Back Camera\";\n                } else {\n                  label = \"Unknown Camera\";\n                }\n\n                devices.push({\n                  kind: deviceInfo.kind,\n                  deviceId: deviceInfo.deviceId,\n                  label: label\n                });\n              } else {\n                devices.push({\n                  kind: deviceInfo.kind,\n                  deviceId: deviceInfo.deviceId,\n                  label: deviceInfo.label\n                });\n              }\n            });\n            audioDevices.forEach(function (deviceInfo, index) {\n              if (!deviceInfo.label) {\n                var label = \"\";\n\n                switch (index) {\n                  case 0:\n                    // Default Microphone\n                    label = 'Default';\n                    break;\n\n                  case 1:\n                    // Microphone + Speakerphone\n                    var defaultMatch = pluginAudioDevices.filter(function (d) {\n                      return d.label.includes('Built');\n                    })[0];\n                    label = defaultMatch ? defaultMatch.label : 'Built-in Microphone';\n                    break;\n\n                  case 2:\n                    // Headset Microphone\n                    var wiredMatch = pluginAudioDevices.filter(function (d) {\n                      return d.label.includes('Wired');\n                    })[0];\n\n                    if (wiredMatch) {\n                      label = wiredMatch.label;\n                    } else {\n                      label = 'Headset earpiece';\n                    }\n\n                    break;\n\n                  case 3:\n                    var wirelessMatch = pluginAudioDevices.filter(function (d) {\n                      return d.label.includes('Bluetooth');\n                    })[0];\n                    label = wirelessMatch ? wirelessMatch.label : 'Wireless';\n                    break;\n\n                  default:\n                    label = \"Unknown Microphone\";\n                    break;\n                }\n\n                devices.push({\n                  kind: deviceInfo.kind,\n                  deviceId: deviceInfo.deviceId,\n                  label: label\n                });\n              } else {\n                devices.push({\n                  kind: deviceInfo.kind,\n                  deviceId: deviceInfo.deviceId,\n                  label: deviceInfo.label\n                });\n              }\n            });\n            resolve(devices);\n          });\n        } else {\n          // Rest of platforms\n          deviceInfos.forEach(function (deviceInfo) {\n            if (deviceInfo.kind === 'audioinput' || deviceInfo.kind === 'videoinput') {\n              devices.push({\n                kind: deviceInfo.kind,\n                deviceId: deviceInfo.deviceId,\n                label: deviceInfo.label\n              });\n            }\n          });\n          resolve(devices);\n        }\n      })[\"catch\"](function (error) {\n        console.error('Error getting devices', error);\n        reject(error);\n      });\n    });\n  };\n  /**\n   * Get a MediaStream object that you can customize before calling [[initPublisher]] (pass _MediaStreamTrack_ property of the _MediaStream_ value resolved by the Promise as `audioSource` or `videoSource` properties in [[initPublisher]])\n   *\n   * Parameter `options` is the same as in [[initPublisher]] second parameter (of type [[PublisherProperties]]), but only the following properties will be applied: `audioSource`, `videoSource`, `frameRate`, `resolution`\n   *\n   * To customize the Publisher's video, the API for HTMLCanvasElement is very useful. For example, to get a black-and-white video at 10 fps and HD resolution with no sound:\n   * ```\n   * var OV = new OpenVidu();\n   * var FRAME_RATE = 10;\n   *\n   * OV.getUserMedia({\n   *    audioSource: false,\n   *    videoSource: undefined,\n   *    resolution: '1280x720',\n   *    frameRate: FRAME_RATE\n   * })\n   * .then(mediaStream => {\n   *\n   *    var videoTrack = mediaStream.getVideoTracks()[0];\n   *    var video = document.createElement('video');\n   *    video.srcObject = new MediaStream([videoTrack]);\n   *\n   *    var canvas = document.createElement('canvas');\n   *    var ctx = canvas.getContext('2d');\n   *    ctx.filter = 'grayscale(100%)';\n   *\n   *    video.addEventListener('play', () => {\n   *      var loop = () => {\n   *        if (!video.paused && !video.ended) {\n   *          ctx.drawImage(video, 0, 0, 300, 170);\n   *          setTimeout(loop, 1000/ FRAME_RATE); // Drawing at 10 fps\n   *        }\n   *      };\n   *      loop();\n   *    });\n   *    video.play();\n   *\n   *    var grayVideoTrack = canvas.captureStream(FRAME_RATE).getVideoTracks()[0];\n   *    var publisher = this.OV.initPublisher(\n   *      myHtmlTarget,\n   *      {\n   *        audioSource: false,\n   *        videoSource: grayVideoTrack\n   *      });\n   * });\n   * ```\n   */\n\n\n  OpenVidu.prototype.getUserMedia = function (options) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var askForAudioStreamOnly = function askForAudioStreamOnly(previousMediaStream, constraints) {\n        var definedAudioConstraint = constraints.audio === undefined ? true : constraints.audio;\n        var constraintsAux = {\n          audio: definedAudioConstraint,\n          video: false\n        };\n        navigator.mediaDevices.getUserMedia(constraintsAux).then(function (audioOnlyStream) {\n          previousMediaStream.addTrack(audioOnlyStream.getAudioTracks()[0]);\n          resolve(previousMediaStream);\n        })[\"catch\"](function (error) {\n          previousMediaStream.getAudioTracks().forEach(function (track) {\n            track.stop();\n          });\n          previousMediaStream.getVideoTracks().forEach(function (track) {\n            track.stop();\n          });\n          reject(_this.generateAudioDeviceError(error, constraintsAux));\n        });\n      };\n\n      _this.generateMediaConstraints(options).then(function (myConstraints) {\n        var _a, _b;\n\n        if (!!myConstraints.videoTrack && !!myConstraints.audioTrack || !!myConstraints.audioTrack && ((_a = myConstraints.constraints) === null || _a === void 0 ? void 0 : _a.video) === false || !!myConstraints.videoTrack && ((_b = myConstraints.constraints) === null || _b === void 0 ? void 0 : _b.audio) === false) {\n          // No need to call getUserMedia at all. Both tracks provided, or only AUDIO track provided or only VIDEO track provided\n          resolve(_this.addAlreadyProvidedTracks(myConstraints, new MediaStream()));\n        } else {\n          // getUserMedia must be called. AUDIO or VIDEO are requesting a new track\n          // Delete already provided constraints for audio or video\n          if (!!myConstraints.videoTrack) {\n            delete myConstraints.constraints.video;\n          }\n\n          if (!!myConstraints.audioTrack) {\n            delete myConstraints.constraints.audio;\n          }\n\n          var mustAskForAudioTrackLater_1 = false;\n\n          if (typeof options.videoSource === 'string') {\n            // Video is deviceId or screen sharing\n            if (options.videoSource === 'screen' || options.videoSource === 'window' || platform.name === 'Electron' && options.videoSource.startsWith('screen:')) {\n              // Video is screen sharing\n              mustAskForAudioTrackLater_1 = !myConstraints.audioTrack && options.audioSource !== null && options.audioSource !== false;\n\n              if (navigator.mediaDevices['getDisplayMedia'] && platform.name !== 'Electron') {\n                // getDisplayMedia supported\n                navigator.mediaDevices['getDisplayMedia']({\n                  video: true\n                }).then(function (mediaStream) {\n                  _this.addAlreadyProvidedTracks(myConstraints, mediaStream);\n\n                  if (mustAskForAudioTrackLater_1) {\n                    askForAudioStreamOnly(mediaStream, myConstraints.constraints);\n                    return;\n                  } else {\n                    resolve(mediaStream);\n                  }\n                })[\"catch\"](function (error) {\n                  var errorName = OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED;\n                  var errorMessage = error.toString();\n                  reject(new OpenViduError_1.OpenViduError(errorName, errorMessage));\n                });\n                return;\n              } else {// getDisplayMedia NOT supported. Can perform getUserMedia below with already calculated constraints\n              }\n            } else {// Video is deviceId. Can perform getUserMedia below with already calculated constraints\n              }\n          } // Use already calculated constraints\n\n\n          var constraintsAux = mustAskForAudioTrackLater_1 ? {\n            video: myConstraints.constraints.video\n          } : myConstraints.constraints;\n          navigator.mediaDevices.getUserMedia(constraintsAux).then(function (mediaStream) {\n            _this.addAlreadyProvidedTracks(myConstraints, mediaStream);\n\n            if (mustAskForAudioTrackLater_1) {\n              askForAudioStreamOnly(mediaStream, myConstraints.constraints);\n              return;\n            } else {\n              resolve(mediaStream);\n            }\n          })[\"catch\"](function (error) {\n            var errorName;\n            var errorMessage = error.toString();\n\n            if (!(options.videoSource === 'screen')) {\n              errorName = OpenViduError_1.OpenViduErrorName.DEVICE_ACCESS_DENIED;\n            } else {\n              errorName = OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED;\n            }\n\n            reject(new OpenViduError_1.OpenViduError(errorName, errorMessage));\n          });\n        }\n      })[\"catch\"](function (error) {\n        reject(error);\n      });\n    });\n  };\n  /* tslint:disable:no-empty */\n\n  /**\n   * Disable all logging except error level\n   */\n\n\n  OpenVidu.prototype.enableProdMode = function () {\n    console.log = function () {};\n\n    console.debug = function () {};\n\n    console.info = function () {};\n\n    console.warn = function () {};\n  };\n  /* tslint:enable:no-empty */\n\n  /**\n   * Set OpenVidu advanced configuration options. Currently `configuration` is an object with the following optional properties (see [[OpenViduAdvancedConfiguration]] for more details):\n   * - `iceServers`: set custom STUN/TURN servers to be used by OpenVidu Browser\n   * - `screenShareChromeExtension`: url to a custom screen share extension for Chrome to be used instead of the default one, based on ours [https://github.com/OpenVidu/openvidu-screen-sharing-chrome-extension](https://github.com/OpenVidu/openvidu-screen-sharing-chrome-extension)\n   * - `publisherSpeakingEventsOptions`: custom configuration for the [[PublisherSpeakingEvent]] feature and the [StreamManagerEvent.streamAudioVolumeChange](/api/openvidu-browser/classes/streammanagerevent.html) feature\n   *\n   * Call this method to override previous values at any moment.\n   */\n\n\n  OpenVidu.prototype.setAdvancedConfiguration = function (configuration) {\n    this.advancedConfiguration = configuration;\n  };\n  /* Hidden methods */\n\n  /**\n   * @hidden\n   */\n\n\n  OpenVidu.prototype.generateMediaConstraints = function (publisherProperties) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var myConstraints = {\n        audioTrack: undefined,\n        videoTrack: undefined,\n        constraints: {\n          audio: undefined,\n          video: undefined\n        }\n      };\n      var audioSource = publisherProperties.audioSource;\n      var videoSource = publisherProperties.videoSource; // CASE 1: null/false\n\n      if (audioSource === null || audioSource === false) {\n        // No audio track\n        myConstraints.constraints.audio = false;\n      }\n\n      if (videoSource === null || videoSource === false) {\n        // No video track\n        myConstraints.constraints.video = false;\n      }\n\n      if (myConstraints.constraints.audio === false && myConstraints.constraints.video === false) {\n        // ERROR! audioSource and videoSource cannot be both false at the same time\n        reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.NO_INPUT_SOURCE_SET, \"Properties 'audioSource' and 'videoSource' cannot be set to false or null at the same time\"));\n      } // CASE 2: MediaStreamTracks\n\n\n      if (typeof MediaStreamTrack !== 'undefined' && audioSource instanceof MediaStreamTrack) {\n        // Already provided audio track\n        myConstraints.audioTrack = audioSource;\n      }\n\n      if (typeof MediaStreamTrack !== 'undefined' && videoSource instanceof MediaStreamTrack) {\n        // Already provided video track\n        myConstraints.videoTrack = videoSource;\n      } // CASE 3: Default tracks\n\n\n      if (audioSource === undefined) {\n        myConstraints.constraints.audio = true;\n      }\n\n      if (videoSource === undefined) {\n        myConstraints.constraints.video = {\n          width: {\n            ideal: 640\n          },\n          height: {\n            ideal: 480\n          }\n        };\n      } // CASE 3.5: give values to resolution and frameRate if video not null/false\n\n\n      if (videoSource !== null && videoSource !== false) {\n        if (!!publisherProperties.resolution) {\n          var widthAndHeight = publisherProperties.resolution.toLowerCase().split('x');\n          var idealWidth = Number(widthAndHeight[0]);\n          var idealHeight = Number(widthAndHeight[1]);\n          myConstraints.constraints.video = {\n            width: {\n              ideal: idealWidth\n            },\n            height: {\n              ideal: idealHeight\n            }\n          };\n        }\n\n        if (!!publisherProperties.frameRate) {\n          myConstraints.constraints.video.frameRate = {\n            ideal: publisherProperties.frameRate\n          };\n        }\n      } // CASE 4: deviceId or screen sharing\n\n\n      if (typeof audioSource === 'string') {\n        myConstraints.constraints.audio = {\n          deviceId: {\n            exact: audioSource\n          }\n        };\n      }\n\n      if (typeof videoSource === 'string') {\n        if (!_this.isScreenShare(videoSource)) {\n          if (!myConstraints.constraints.video) {\n            myConstraints.constraints.video = {};\n          }\n\n          myConstraints.constraints.video['deviceId'] = {\n            exact: videoSource\n          };\n        } else {\n          // Screen sharing\n          if (!_this.checkScreenSharingCapabilities()) {\n            var error = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_SHARING_NOT_SUPPORTED, 'You can only screen share in desktop Chrome, Firefox, Opera or Electron. Detected client: ' + platform.name);\n            console.error(error);\n            reject(error);\n          } else {\n            if (platform.name === 'Electron') {\n              var prefix = \"screen:\";\n              var videoSourceString = videoSource;\n              var electronScreenId = videoSourceString.substr(videoSourceString.indexOf(prefix) + prefix.length);\n              myConstraints.constraints.video = {\n                mandatory: {\n                  chromeMediaSource: 'desktop',\n                  chromeMediaSourceId: electronScreenId\n                }\n              };\n              resolve(myConstraints);\n            } else {\n              if (!!_this.advancedConfiguration.screenShareChromeExtension && !(platform.name.indexOf('Firefox') !== -1) && !navigator.mediaDevices['getDisplayMedia']) {\n                // Custom screen sharing extension for Chrome (and Opera) and no support for MediaDevices.getDisplayMedia()\n                screenSharing.getScreenConstraints(function (error, screenConstraints) {\n                  if (!!error || !!screenConstraints.mandatory && screenConstraints.mandatory.chromeMediaSource === 'screen') {\n                    if (error === 'permission-denied' || error === 'PermissionDeniedError') {\n                      var error_1 = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED, 'You must allow access to one window of your desktop');\n                      console.error(error_1);\n                      reject(error_1);\n                    } else {\n                      var extensionId = _this.advancedConfiguration.screenShareChromeExtension.split('/').pop().trim();\n\n                      screenSharing.getChromeExtensionStatus(extensionId, function (status) {\n                        if (status === 'installed-disabled') {\n                          var error_2 = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_EXTENSION_DISABLED, 'You must enable the screen extension');\n                          console.error(error_2);\n                          reject(error_2);\n                        }\n\n                        if (status === 'not-installed') {\n                          var error_3 = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_EXTENSION_NOT_INSTALLED, _this.advancedConfiguration.screenShareChromeExtension);\n                          console.error(error_3);\n                          reject(error_3);\n                        }\n                      });\n                      return;\n                    }\n                  } else {\n                    myConstraints.constraints.video = screenConstraints;\n                    resolve(myConstraints);\n                  }\n                });\n                return;\n              } else {\n                if (navigator.mediaDevices['getDisplayMedia']) {\n                  // getDisplayMedia support (Chrome >= 72, Firefox >= 66)\n                  resolve(myConstraints);\n                } else {\n                  // Default screen sharing extension for Chrome/Opera, or is Firefox < 66\n                  var firefoxString = platform.name.indexOf('Firefox') !== -1 ? publisherProperties.videoSource : undefined;\n                  screenSharingAuto.getScreenId(firefoxString, function (error, sourceId, screenConstraints) {\n                    if (!!error) {\n                      if (error === 'not-installed') {\n                        var extensionUrl = !!_this.advancedConfiguration.screenShareChromeExtension ? _this.advancedConfiguration.screenShareChromeExtension : 'https://chrome.google.com/webstore/detail/openvidu-screensharing/lfcgfepafnobdloecchnfaclibenjold';\n                        var err = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_EXTENSION_NOT_INSTALLED, extensionUrl);\n                        console.error(err);\n                        reject(err);\n                      } else if (error === 'installed-disabled') {\n                        var err = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_EXTENSION_DISABLED, 'You must enable the screen extension');\n                        console.error(err);\n                        reject(err);\n                      } else if (error === 'permission-denied') {\n                        var err = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED, 'You must allow access to one window of your desktop');\n                        console.error(err);\n                        reject(err);\n                      } else {\n                        var err = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.GENERIC_ERROR, 'Unknown error when accessing screen share');\n                        console.error(err);\n                        console.error(error);\n                        reject(err);\n                      }\n                    } else {\n                      myConstraints.constraints.video = screenConstraints.video;\n                      resolve(myConstraints);\n                    }\n                  });\n                  return;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      resolve(myConstraints);\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenVidu.prototype.startWs = function (onConnectSucces) {\n    var config = {\n      heartbeat: 5000,\n      sendCloseMessage: false,\n      ws: {\n        uri: this.wsUri,\n        onconnected: onConnectSucces,\n        ondisconnect: this.disconnectCallback.bind(this),\n        onreconnecting: this.reconnectingCallback.bind(this),\n        onreconnected: this.reconnectedCallback.bind(this)\n      },\n      rpc: {\n        requestTimeout: 10000,\n        participantJoined: this.session.onParticipantJoined.bind(this.session),\n        participantPublished: this.session.onParticipantPublished.bind(this.session),\n        participantUnpublished: this.session.onParticipantUnpublished.bind(this.session),\n        participantLeft: this.session.onParticipantLeft.bind(this.session),\n        participantEvicted: this.session.onParticipantEvicted.bind(this.session),\n        recordingStarted: this.session.onRecordingStarted.bind(this.session),\n        recordingStopped: this.session.onRecordingStopped.bind(this.session),\n        sendMessage: this.session.onNewMessage.bind(this.session),\n        streamPropertyChanged: this.session.onStreamPropertyChanged.bind(this.session),\n        filterEventDispatched: this.session.onFilterEventDispatched.bind(this.session),\n        iceCandidate: this.session.recvIceCandidate.bind(this.session),\n        mediaError: this.session.onMediaError.bind(this.session)\n      }\n    };\n    this.jsonRpcClient = new RpcBuilder.clients.JsonRpcClient(config);\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenVidu.prototype.closeWs = function () {\n    this.jsonRpcClient.close(4102, \"Connection closed by client\");\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenVidu.prototype.sendRequest = function (method, params, callback) {\n    if (params && params instanceof Function) {\n      callback = params;\n      params = {};\n    }\n\n    console.debug('Sending request: {method:\"' + method + '\", params: ' + JSON.stringify(params) + '}');\n    this.jsonRpcClient.send(method, params, callback);\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenVidu.prototype.getWsUri = function () {\n    return this.wsUri;\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenVidu.prototype.getSecret = function () {\n    return this.secret;\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenVidu.prototype.getRecorder = function () {\n    return this.recorder;\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenVidu.prototype.generateAudioDeviceError = function (error, constraints) {\n    if (error.name === 'Error') {\n      // Safari OverConstrainedError has as name property 'Error' instead of 'OverConstrainedError'\n      error.name = error.constructor.name;\n    }\n\n    var errorName, errorMessage;\n\n    switch (error.name.toLowerCase()) {\n      case 'notfounderror':\n        errorName = OpenViduError_1.OpenViduErrorName.INPUT_AUDIO_DEVICE_NOT_FOUND;\n        errorMessage = error.toString();\n        return new OpenViduError_1.OpenViduError(errorName, errorMessage);\n\n      case 'notallowederror':\n        errorName = OpenViduError_1.OpenViduErrorName.DEVICE_ACCESS_DENIED;\n        errorMessage = error.toString();\n        return new OpenViduError_1.OpenViduError(errorName, errorMessage);\n\n      case 'overconstrainederror':\n        if (error.constraint.toLowerCase() === 'deviceid') {\n          errorName = OpenViduError_1.OpenViduErrorName.INPUT_AUDIO_DEVICE_NOT_FOUND;\n          errorMessage = \"Audio input device with deviceId '\" + constraints.audio.deviceId.exact + \"' not found\";\n        } else {\n          errorName = OpenViduError_1.OpenViduErrorName.PUBLISHER_PROPERTIES_ERROR;\n          errorMessage = \"Audio input device doesn't support the value passed for constraint '\" + error.constraint + \"'\";\n        }\n\n        return new OpenViduError_1.OpenViduError(errorName, errorMessage);\n\n      case 'notreadableerror':\n        errorName = OpenViduError_1.OpenViduErrorName.DEVICE_ALREADY_IN_USE;\n        errorMessage = error.toString();\n        return new OpenViduError_1.OpenViduError(errorName, errorMessage);\n\n      default:\n        return new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.INPUT_AUDIO_DEVICE_GENERIC_ERROR, error.toString());\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenVidu.prototype.addAlreadyProvidedTracks = function (myConstraints, mediaStream) {\n    if (!!myConstraints.videoTrack) {\n      mediaStream.addTrack(myConstraints.videoTrack);\n    }\n\n    if (!!myConstraints.audioTrack) {\n      mediaStream.addTrack(myConstraints.audioTrack);\n    }\n\n    return mediaStream;\n  };\n  /* Private methods */\n\n\n  OpenVidu.prototype.disconnectCallback = function () {\n    console.warn('Websocket connection lost');\n\n    if (this.isRoomAvailable()) {\n      this.session.onLostConnection('networkDisconnect');\n    } else {\n      alert('Connection error. Please reload page.');\n    }\n  };\n\n  OpenVidu.prototype.reconnectingCallback = function () {\n    console.warn('Websocket connection lost (reconnecting)');\n\n    if (!this.isRoomAvailable()) {\n      alert('Connection error. Please reload page.');\n    } else {\n      this.session.emitEvent('reconnecting', []);\n    }\n  };\n\n  OpenVidu.prototype.reconnectedCallback = function () {\n    var _this = this;\n\n    console.warn('Websocket reconnected');\n\n    if (this.isRoomAvailable()) {\n      this.sendRequest('connect', {\n        sessionId: this.session.connection.rpcSessionId\n      }, function (error, response) {\n        if (!!error) {\n          console.error(error);\n          console.warn('Websocket was able to reconnect to OpenVidu Server, but your Connection was already destroyed due to timeout. You are no longer a participant of the Session and your media streams have been destroyed');\n\n          _this.session.onLostConnection(\"networkDisconnect\");\n\n          _this.jsonRpcClient.close(4101, \"Reconnection fault\");\n        } else {\n          _this.jsonRpcClient.resetPing();\n\n          _this.session.onRecoveredConnection();\n        }\n      });\n    } else {\n      alert('Connection error. Please reload page.');\n    }\n  };\n\n  OpenVidu.prototype.isRoomAvailable = function () {\n    if (this.session !== undefined && this.session instanceof Session_1.Session) {\n      return true;\n    } else {\n      console.warn('Session instance not found');\n      return false;\n    }\n  };\n\n  OpenVidu.prototype.isScreenShare = function (videoSource) {\n    return videoSource === 'screen' || videoSource === 'window' || platform.name === 'Electron' && videoSource.startsWith('screen:');\n  };\n\n  return OpenVidu;\n}();\n\nexports.OpenVidu = OpenVidu;","map":{"version":3,"sources":["../../src/OpenVidu/OpenVidu.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * (C) Copyright 2017-2020 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nexports.__esModule = true;\nvar LocalRecorder_1 = require(\"./LocalRecorder\");\nvar Publisher_1 = require(\"./Publisher\");\nvar Session_1 = require(\"./Session\");\nvar StreamPropertyChangedEvent_1 = require(\"../OpenViduInternal/Events/StreamPropertyChangedEvent\");\nvar OpenViduError_1 = require(\"../OpenViduInternal/Enums/OpenViduError\");\nvar VideoInsertMode_1 = require(\"../OpenViduInternal/Enums/VideoInsertMode\");\nvar screenSharingAuto = require(\"../OpenViduInternal/ScreenSharing/Screen-Capturing-Auto\");\nvar screenSharing = require(\"../OpenViduInternal/ScreenSharing/Screen-Capturing\");\n/**\n * @hidden\n */\nvar EventEmitter = require(\"wolfy87-eventemitter\");\n/**\n * @hidden\n */\nvar RpcBuilder = require(\"../OpenViduInternal/KurentoUtils/kurento-jsonrpc\");\n/**\n * @hidden\n */\nvar platform = require(\"platform\");\nplatform['isIonicIos'] = (platform.product === 'iPhone' || platform.product === 'iPad') && platform.ua.indexOf('Safari') === -1;\nplatform['isIonicAndroid'] = platform.os.family === 'Android' && platform.name == \"Android Browser\";\n/**\n * @hidden\n */\nvar packageJson = require('../../package.json');\n/**\n * Entrypoint of OpenVidu Browser library.\n * Use it to initialize objects of type [[Session]], [[Publisher]] and [[LocalRecorder]]\n */\nvar OpenVidu = /** @class */ (function () {\n    function OpenVidu() {\n        var _this = this;\n        /**\n         * @hidden\n         */\n        this.publishers = [];\n        /**\n         * @hidden\n         */\n        this.secret = '';\n        /**\n         * @hidden\n         */\n        this.recorder = false;\n        /**\n         * @hidden\n         */\n        this.advancedConfiguration = {};\n        /**\n         * @hidden\n         */\n        this.webrtcStatsInterval = 0;\n        /**\n         * @hidden\n         */\n        this.ee = new EventEmitter();\n        this.libraryVersion = packageJson.version;\n        console.info(\"'OpenVidu' initialized\");\n        console.info(\"openvidu-browser version: \" + this.libraryVersion);\n        if (platform.os.family === 'iOS' || platform.os.family === 'Android') {\n            // Listen to orientationchange only on mobile devices\n            window.addEventListener('orientationchange', function () {\n                _this.publishers.forEach(function (publisher) {\n                    if (publisher.stream.isLocalStreamPublished && !!publisher.stream && !!publisher.stream.hasVideo && !!publisher.stream.streamManager.videos[0]) {\n                        var attempts_1 = 0;\n                        var oldWidth_1 = publisher.stream.videoDimensions.width;\n                        var oldHeight_1 = publisher.stream.videoDimensions.height;\n                        var getNewVideoDimensions_1 = function () {\n                            return new Promise(function (resolve, reject) {\n                                if (platform['isIonicIos']) {\n                                    // iOS Ionic. Limitation: must get new dimensions from an existing video element already inserted into DOM\n                                    resolve({\n                                        newWidth: publisher.stream.streamManager.videos[0].video.videoWidth,\n                                        newHeight: publisher.stream.streamManager.videos[0].video.videoHeight\n                                    });\n                                }\n                                else {\n                                    // Rest of platforms\n                                    // New resolution got from different places for Chrome and Firefox. Chrome needs a videoWidth and videoHeight of a videoElement.\n                                    // Firefox needs getSettings from the videoTrack\n                                    var firefoxSettings = publisher.stream.getMediaStream().getVideoTracks()[0].getSettings();\n                                    var newWidth = ((platform.name.toLowerCase().indexOf('firefox') !== -1) ? firefoxSettings.width : publisher.videoReference.videoWidth);\n                                    var newHeight = ((platform.name.toLowerCase().indexOf('firefox') !== -1) ? firefoxSettings.height : publisher.videoReference.videoHeight);\n                                    resolve({ newWidth: newWidth, newHeight: newHeight });\n                                }\n                            });\n                        };\n                        var repeatUntilChange_1 = setInterval(function () {\n                            getNewVideoDimensions_1().then(function (newDimensions) {\n                                sendStreamPropertyChangedEvent_1(oldWidth_1, oldHeight_1, newDimensions.newWidth, newDimensions.newHeight);\n                            });\n                        }, 75);\n                        var sendStreamPropertyChangedEvent_1 = function (oldWidth, oldHeight, newWidth, newHeight) {\n                            attempts_1++;\n                            if (attempts_1 > 10) {\n                                clearTimeout(repeatUntilChange_1);\n                            }\n                            if (newWidth !== oldWidth || newHeight !== oldHeight) {\n                                publisher.stream.videoDimensions = {\n                                    width: newWidth || 0,\n                                    height: newHeight || 0\n                                };\n                                _this.sendRequest('streamPropertyChanged', {\n                                    streamId: publisher.stream.streamId,\n                                    property: 'videoDimensions',\n                                    newValue: JSON.stringify(publisher.stream.videoDimensions),\n                                    reason: 'deviceRotated'\n                                }, function (error, response) {\n                                    if (error) {\n                                        console.error(\"Error sending 'streamPropertyChanged' event\", error);\n                                    }\n                                    else {\n                                        _this.session.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.session, publisher.stream, 'videoDimensions', publisher.stream.videoDimensions, { width: oldWidth, height: oldHeight }, 'deviceRotated')]);\n                                        publisher.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(publisher, publisher.stream, 'videoDimensions', publisher.stream.videoDimensions, { width: oldWidth, height: oldHeight }, 'deviceRotated')]);\n                                    }\n                                });\n                                clearTimeout(repeatUntilChange_1);\n                            }\n                        };\n                    }\n                });\n            });\n        }\n    }\n    /**\n     * Returns new session\n     */\n    OpenVidu.prototype.initSession = function () {\n        this.session = new Session_1.Session(this);\n        return this.session;\n    };\n    /**\n     * Returns a new publisher\n     *\n     * #### Events dispatched\n     *\n     * The [[Publisher]] object will dispatch an `accessDialogOpened` event, only if the pop-up shown by the browser to request permissions for the camera is opened. You can use this event to alert the user about granting permissions\n     * for your website. An `accessDialogClosed` event will also be dispatched after user clicks on \"Allow\" or \"Block\" in the pop-up.\n     *\n     * The [[Publisher]] object will dispatch an `accessAllowed` or `accessDenied` event once it has been granted access to the requested input devices or not.\n     *\n     * The [[Publisher]] object will dispatch a `videoElementCreated` event once a HTML video element has been added to DOM (only if you\n     * [let OpenVidu take care of the video players](/docs/how-do-i/manage-videos/#let-openvidu-take-care-of-the-video-players)). See [[VideoElementEvent]] to learn more.\n     *\n     * The [[Publisher]] object will dispatch a `streamPlaying` event once the local streams starts playing. See [[StreamManagerEvent]] to learn more.\n     *\n     * @param targetElement  HTML DOM element (or its `id` attribute) in which the video element of the Publisher will be inserted (see [[PublisherProperties.insertMode]]). If *null* or *undefined* no default video will be created for this Publisher.\n     * You can always call method [[Publisher.addVideoElement]] or [[Publisher.createVideoElement]] to manage the video elements on your own (see [Manage video players](/docs/how-do-i/manage-videos) section)\n     * @param completionHandler `error` parameter is null if `initPublisher` succeeds, and is defined if it fails.\n     *                          `completionHandler` function is called before the Publisher dispatches an `accessAllowed` or an `accessDenied` event\n     */\n    OpenVidu.prototype.initPublisher = function (targetElement, param2, param3) {\n        var properties;\n        if (!!param2 && (typeof param2 !== 'function')) {\n            // Matches 'initPublisher(targetElement, properties)' or 'initPublisher(targetElement, properties, completionHandler)'\n            properties = param2;\n            properties = {\n                audioSource: (typeof properties.audioSource !== 'undefined') ? properties.audioSource : undefined,\n                frameRate: (typeof MediaStreamTrack !== 'undefined' && properties.videoSource instanceof MediaStreamTrack) ? undefined : ((typeof properties.frameRate !== 'undefined') ? properties.frameRate : undefined),\n                insertMode: (typeof properties.insertMode !== 'undefined') ? ((typeof properties.insertMode === 'string') ? VideoInsertMode_1.VideoInsertMode[properties.insertMode] : properties.insertMode) : VideoInsertMode_1.VideoInsertMode.APPEND,\n                mirror: (typeof properties.mirror !== 'undefined') ? properties.mirror : true,\n                publishAudio: (typeof properties.publishAudio !== 'undefined') ? properties.publishAudio : true,\n                publishVideo: (typeof properties.publishVideo !== 'undefined') ? properties.publishVideo : true,\n                resolution: (typeof MediaStreamTrack !== 'undefined' && properties.videoSource instanceof MediaStreamTrack) ? undefined : ((typeof properties.resolution !== 'undefined') ? properties.resolution : '640x480'),\n                videoSource: (typeof properties.videoSource !== 'undefined') ? properties.videoSource : undefined,\n                filter: properties.filter\n            };\n        }\n        else {\n            // Matches 'initPublisher(targetElement)' or 'initPublisher(targetElement, completionHandler)'\n            properties = {\n                insertMode: VideoInsertMode_1.VideoInsertMode.APPEND,\n                mirror: true,\n                publishAudio: true,\n                publishVideo: true,\n                resolution: '640x480'\n            };\n        }\n        var publisher = new Publisher_1.Publisher(targetElement, properties, this);\n        var completionHandler;\n        if (!!param2 && (typeof param2 === 'function')) {\n            completionHandler = param2;\n        }\n        else if (!!param3) {\n            completionHandler = param3;\n        }\n        publisher.initialize()\n            .then(function () {\n            if (completionHandler !== undefined) {\n                completionHandler(undefined);\n            }\n            publisher.emitEvent('accessAllowed', []);\n        })[\"catch\"](function (error) {\n            if (completionHandler !== undefined) {\n                completionHandler(error);\n            }\n            publisher.emitEvent('accessDenied', [error]);\n        });\n        this.publishers.push(publisher);\n        return publisher;\n    };\n    OpenVidu.prototype.initPublisherAsync = function (targetElement, properties) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var publisher;\n            var callback = function (error) {\n                if (!!error) {\n                    reject(error);\n                }\n                else {\n                    resolve(publisher);\n                }\n            };\n            if (!!properties) {\n                publisher = _this.initPublisher(targetElement, properties, callback);\n            }\n            else {\n                publisher = _this.initPublisher(targetElement, callback);\n            }\n        });\n    };\n    /**\n     * Returns a new local recorder for recording streams straight away from the browser\n     * @param stream  Stream to record\n     */\n    OpenVidu.prototype.initLocalRecorder = function (stream) {\n        return new LocalRecorder_1.LocalRecorder(stream);\n    };\n    /**\n     * Checks if the browser supports OpenVidu\n     * @returns 1 if the browser supports OpenVidu, 0 otherwise\n     */\n    OpenVidu.prototype.checkSystemRequirements = function () {\n        var browser = platform.name;\n        var family = platform.os.family;\n        var userAgent = !!platform.ua ? platform.ua : navigator.userAgent;\n        // Reject iPhones and iPads if not Safari ('Safari' also covers Ionic for iOS)\n        if (family === 'iOS' && (browser !== 'Safari' || userAgent.indexOf('CriOS') !== -1 || userAgent.indexOf('FxiOS') !== -1)) {\n            return 0;\n        }\n        // Accept: Chrome (desktop and Android), Firefox (desktop and Android), Opera (desktop and Android),\n        // Safari (OSX and iOS), Ionic (Android and iOS)\n        if ((browser !== 'Safari') &&\n            (browser !== 'Chrome') && (browser !== 'Chrome Mobile') &&\n            (browser !== 'Firefox') && (browser !== 'Firefox Mobile') &&\n            (browser !== 'Opera') && (browser !== 'Opera Mobile') &&\n            (browser !== 'Android Browser') && (browser !== 'Electron')) {\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    };\n    /**\n     * Checks if the browser supports screen-sharing. Desktop Chrome, Firefox and Opera support screen-sharing\n     * @returns 1 if the browser supports screen-sharing, 0 otherwise\n     */\n    OpenVidu.prototype.checkScreenSharingCapabilities = function () {\n        var browser = platform.name;\n        var family = platform.os.family;\n        // Reject mobile devices\n        if (family === 'iOS' || family === 'Android') {\n            return 0;\n        }\n        if ((browser !== 'Chrome') && (browser !== 'Firefox') && (browser !== 'Opera') && (browser !== 'Electron')) {\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    };\n    /**\n     * Collects information about the media input devices available on the system. You can pass property `deviceId` of a [[Device]] object as value of `audioSource` or `videoSource` properties in [[initPublisher]] method\n     */\n    OpenVidu.prototype.getDevices = function () {\n        return new Promise(function (resolve, reject) {\n            navigator.mediaDevices.enumerateDevices().then(function (deviceInfos) {\n                var devices = [];\n                // Ionic Android  devices\n                if (platform['isIonicAndroid'] && cordova.plugins && cordova.plugins.EnumerateDevicesPlugin) {\n                    cordova.plugins.EnumerateDevicesPlugin.getEnumerateDevices().then(function (pluginDevices) {\n                        var pluginAudioDevices = [];\n                        var videoDevices = [];\n                        var audioDevices = [];\n                        pluginAudioDevices = pluginDevices.filter(function (device) { return device.kind === 'audioinput'; });\n                        videoDevices = deviceInfos.filter(function (device) { return device.kind === 'videoinput'; });\n                        audioDevices = deviceInfos.filter(function (device) { return device.kind === 'audioinput'; });\n                        videoDevices.forEach(function (deviceInfo, index) {\n                            if (!deviceInfo.label) {\n                                var label = \"\";\n                                if (index === 0) {\n                                    label = \"Front Camera\";\n                                }\n                                else if (index === 1) {\n                                    label = \"Back Camera\";\n                                }\n                                else {\n                                    label = \"Unknown Camera\";\n                                }\n                                devices.push({\n                                    kind: deviceInfo.kind,\n                                    deviceId: deviceInfo.deviceId,\n                                    label: label\n                                });\n                            }\n                            else {\n                                devices.push({\n                                    kind: deviceInfo.kind,\n                                    deviceId: deviceInfo.deviceId,\n                                    label: deviceInfo.label\n                                });\n                            }\n                        });\n                        audioDevices.forEach(function (deviceInfo, index) {\n                            if (!deviceInfo.label) {\n                                var label = \"\";\n                                switch (index) {\n                                    case 0: // Default Microphone\n                                        label = 'Default';\n                                        break;\n                                    case 1: // Microphone + Speakerphone\n                                        var defaultMatch = pluginAudioDevices.filter(function (d) { return d.label.includes('Built'); })[0];\n                                        label = defaultMatch ? defaultMatch.label : 'Built-in Microphone';\n                                        break;\n                                    case 2: // Headset Microphone\n                                        var wiredMatch = pluginAudioDevices.filter(function (d) { return d.label.includes('Wired'); })[0];\n                                        if (wiredMatch) {\n                                            label = wiredMatch.label;\n                                        }\n                                        else {\n                                            label = 'Headset earpiece';\n                                        }\n                                        break;\n                                    case 3:\n                                        var wirelessMatch = pluginAudioDevices.filter(function (d) { return d.label.includes('Bluetooth'); })[0];\n                                        label = wirelessMatch ? wirelessMatch.label : 'Wireless';\n                                        break;\n                                    default:\n                                        label = \"Unknown Microphone\";\n                                        break;\n                                }\n                                devices.push({\n                                    kind: deviceInfo.kind,\n                                    deviceId: deviceInfo.deviceId,\n                                    label: label\n                                });\n                            }\n                            else {\n                                devices.push({\n                                    kind: deviceInfo.kind,\n                                    deviceId: deviceInfo.deviceId,\n                                    label: deviceInfo.label\n                                });\n                            }\n                        });\n                        resolve(devices);\n                    });\n                }\n                else {\n                    // Rest of platforms\n                    deviceInfos.forEach(function (deviceInfo) {\n                        if (deviceInfo.kind === 'audioinput' || deviceInfo.kind === 'videoinput') {\n                            devices.push({\n                                kind: deviceInfo.kind,\n                                deviceId: deviceInfo.deviceId,\n                                label: deviceInfo.label\n                            });\n                        }\n                    });\n                    resolve(devices);\n                }\n            })[\"catch\"](function (error) {\n                console.error('Error getting devices', error);\n                reject(error);\n            });\n        });\n    };\n    /**\n     * Get a MediaStream object that you can customize before calling [[initPublisher]] (pass _MediaStreamTrack_ property of the _MediaStream_ value resolved by the Promise as `audioSource` or `videoSource` properties in [[initPublisher]])\n     *\n     * Parameter `options` is the same as in [[initPublisher]] second parameter (of type [[PublisherProperties]]), but only the following properties will be applied: `audioSource`, `videoSource`, `frameRate`, `resolution`\n     *\n     * To customize the Publisher's video, the API for HTMLCanvasElement is very useful. For example, to get a black-and-white video at 10 fps and HD resolution with no sound:\n     * ```\n     * var OV = new OpenVidu();\n     * var FRAME_RATE = 10;\n     *\n     * OV.getUserMedia({\n     *    audioSource: false,\n     *    videoSource: undefined,\n     *    resolution: '1280x720',\n     *    frameRate: FRAME_RATE\n     * })\n     * .then(mediaStream => {\n     *\n     *    var videoTrack = mediaStream.getVideoTracks()[0];\n     *    var video = document.createElement('video');\n     *    video.srcObject = new MediaStream([videoTrack]);\n     *\n     *    var canvas = document.createElement('canvas');\n     *    var ctx = canvas.getContext('2d');\n     *    ctx.filter = 'grayscale(100%)';\n     *\n     *    video.addEventListener('play', () => {\n     *      var loop = () => {\n     *        if (!video.paused && !video.ended) {\n     *          ctx.drawImage(video, 0, 0, 300, 170);\n     *          setTimeout(loop, 1000/ FRAME_RATE); // Drawing at 10 fps\n     *        }\n     *      };\n     *      loop();\n     *    });\n     *    video.play();\n     *\n     *    var grayVideoTrack = canvas.captureStream(FRAME_RATE).getVideoTracks()[0];\n     *    var publisher = this.OV.initPublisher(\n     *      myHtmlTarget,\n     *      {\n     *        audioSource: false,\n     *        videoSource: grayVideoTrack\n     *      });\n     * });\n     * ```\n     */\n    OpenVidu.prototype.getUserMedia = function (options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var askForAudioStreamOnly = function (previousMediaStream, constraints) {\n                var definedAudioConstraint = ((constraints.audio === undefined) ? true : constraints.audio);\n                var constraintsAux = { audio: definedAudioConstraint, video: false };\n                navigator.mediaDevices.getUserMedia(constraintsAux)\n                    .then(function (audioOnlyStream) {\n                    previousMediaStream.addTrack(audioOnlyStream.getAudioTracks()[0]);\n                    resolve(previousMediaStream);\n                })[\"catch\"](function (error) {\n                    previousMediaStream.getAudioTracks().forEach(function (track) {\n                        track.stop();\n                    });\n                    previousMediaStream.getVideoTracks().forEach(function (track) {\n                        track.stop();\n                    });\n                    reject(_this.generateAudioDeviceError(error, constraintsAux));\n                });\n            };\n            _this.generateMediaConstraints(options).then(function (myConstraints) {\n                var _a, _b;\n                if (!!myConstraints.videoTrack && !!myConstraints.audioTrack ||\n                    !!myConstraints.audioTrack && ((_a = myConstraints.constraints) === null || _a === void 0 ? void 0 : _a.video) === false ||\n                    !!myConstraints.videoTrack && ((_b = myConstraints.constraints) === null || _b === void 0 ? void 0 : _b.audio) === false) {\n                    // No need to call getUserMedia at all. Both tracks provided, or only AUDIO track provided or only VIDEO track provided\n                    resolve(_this.addAlreadyProvidedTracks(myConstraints, new MediaStream()));\n                }\n                else {\n                    // getUserMedia must be called. AUDIO or VIDEO are requesting a new track\n                    // Delete already provided constraints for audio or video\n                    if (!!myConstraints.videoTrack) {\n                        delete myConstraints.constraints.video;\n                    }\n                    if (!!myConstraints.audioTrack) {\n                        delete myConstraints.constraints.audio;\n                    }\n                    var mustAskForAudioTrackLater_1 = false;\n                    if (typeof options.videoSource === 'string') {\n                        // Video is deviceId or screen sharing\n                        if (options.videoSource === 'screen' ||\n                            options.videoSource === 'window' ||\n                            (platform.name === 'Electron' && options.videoSource.startsWith('screen:'))) {\n                            // Video is screen sharing\n                            mustAskForAudioTrackLater_1 = !myConstraints.audioTrack && (options.audioSource !== null && options.audioSource !== false);\n                            if (navigator.mediaDevices['getDisplayMedia'] && platform.name !== 'Electron') {\n                                // getDisplayMedia supported\n                                navigator.mediaDevices['getDisplayMedia']({ video: true })\n                                    .then(function (mediaStream) {\n                                    _this.addAlreadyProvidedTracks(myConstraints, mediaStream);\n                                    if (mustAskForAudioTrackLater_1) {\n                                        askForAudioStreamOnly(mediaStream, myConstraints.constraints);\n                                        return;\n                                    }\n                                    else {\n                                        resolve(mediaStream);\n                                    }\n                                })[\"catch\"](function (error) {\n                                    var errorName = OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED;\n                                    var errorMessage = error.toString();\n                                    reject(new OpenViduError_1.OpenViduError(errorName, errorMessage));\n                                });\n                                return;\n                            }\n                            else {\n                                // getDisplayMedia NOT supported. Can perform getUserMedia below with already calculated constraints\n                            }\n                        }\n                        else {\n                            // Video is deviceId. Can perform getUserMedia below with already calculated constraints\n                        }\n                    }\n                    // Use already calculated constraints\n                    var constraintsAux = mustAskForAudioTrackLater_1 ? { video: myConstraints.constraints.video } : myConstraints.constraints;\n                    navigator.mediaDevices.getUserMedia(constraintsAux)\n                        .then(function (mediaStream) {\n                        _this.addAlreadyProvidedTracks(myConstraints, mediaStream);\n                        if (mustAskForAudioTrackLater_1) {\n                            askForAudioStreamOnly(mediaStream, myConstraints.constraints);\n                            return;\n                        }\n                        else {\n                            resolve(mediaStream);\n                        }\n                    })[\"catch\"](function (error) {\n                        var errorName;\n                        var errorMessage = error.toString();\n                        if (!(options.videoSource === 'screen')) {\n                            errorName = OpenViduError_1.OpenViduErrorName.DEVICE_ACCESS_DENIED;\n                        }\n                        else {\n                            errorName = OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED;\n                        }\n                        reject(new OpenViduError_1.OpenViduError(errorName, errorMessage));\n                    });\n                }\n            })[\"catch\"](function (error) {\n                reject(error);\n            });\n        });\n    };\n    /* tslint:disable:no-empty */\n    /**\n     * Disable all logging except error level\n     */\n    OpenVidu.prototype.enableProdMode = function () {\n        console.log = function () { };\n        console.debug = function () { };\n        console.info = function () { };\n        console.warn = function () { };\n    };\n    /* tslint:enable:no-empty */\n    /**\n     * Set OpenVidu advanced configuration options. Currently `configuration` is an object with the following optional properties (see [[OpenViduAdvancedConfiguration]] for more details):\n     * - `iceServers`: set custom STUN/TURN servers to be used by OpenVidu Browser\n     * - `screenShareChromeExtension`: url to a custom screen share extension for Chrome to be used instead of the default one, based on ours [https://github.com/OpenVidu/openvidu-screen-sharing-chrome-extension](https://github.com/OpenVidu/openvidu-screen-sharing-chrome-extension)\n     * - `publisherSpeakingEventsOptions`: custom configuration for the [[PublisherSpeakingEvent]] feature and the [StreamManagerEvent.streamAudioVolumeChange](/api/openvidu-browser/classes/streammanagerevent.html) feature\n     *\n     * Call this method to override previous values at any moment.\n     */\n    OpenVidu.prototype.setAdvancedConfiguration = function (configuration) {\n        this.advancedConfiguration = configuration;\n    };\n    /* Hidden methods */\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.generateMediaConstraints = function (publisherProperties) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var myConstraints = {\n                audioTrack: undefined,\n                videoTrack: undefined,\n                constraints: {\n                    audio: undefined,\n                    video: undefined\n                }\n            };\n            var audioSource = publisherProperties.audioSource;\n            var videoSource = publisherProperties.videoSource;\n            // CASE 1: null/false\n            if (audioSource === null || audioSource === false) {\n                // No audio track\n                myConstraints.constraints.audio = false;\n            }\n            if (videoSource === null || videoSource === false) {\n                // No video track\n                myConstraints.constraints.video = false;\n            }\n            if (myConstraints.constraints.audio === false && myConstraints.constraints.video === false) {\n                // ERROR! audioSource and videoSource cannot be both false at the same time\n                reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.NO_INPUT_SOURCE_SET, \"Properties 'audioSource' and 'videoSource' cannot be set to false or null at the same time\"));\n            }\n            // CASE 2: MediaStreamTracks\n            if (typeof MediaStreamTrack !== 'undefined' && audioSource instanceof MediaStreamTrack) {\n                // Already provided audio track\n                myConstraints.audioTrack = audioSource;\n            }\n            if (typeof MediaStreamTrack !== 'undefined' && videoSource instanceof MediaStreamTrack) {\n                // Already provided video track\n                myConstraints.videoTrack = videoSource;\n            }\n            // CASE 3: Default tracks\n            if (audioSource === undefined) {\n                myConstraints.constraints.audio = true;\n            }\n            if (videoSource === undefined) {\n                myConstraints.constraints.video = {\n                    width: {\n                        ideal: 640\n                    },\n                    height: {\n                        ideal: 480\n                    }\n                };\n            }\n            // CASE 3.5: give values to resolution and frameRate if video not null/false\n            if (videoSource !== null && videoSource !== false) {\n                if (!!publisherProperties.resolution) {\n                    var widthAndHeight = publisherProperties.resolution.toLowerCase().split('x');\n                    var idealWidth = Number(widthAndHeight[0]);\n                    var idealHeight = Number(widthAndHeight[1]);\n                    myConstraints.constraints.video = {\n                        width: {\n                            ideal: idealWidth\n                        },\n                        height: {\n                            ideal: idealHeight\n                        }\n                    };\n                }\n                if (!!publisherProperties.frameRate) {\n                    myConstraints.constraints.video.frameRate = { ideal: publisherProperties.frameRate };\n                }\n            }\n            // CASE 4: deviceId or screen sharing\n            if (typeof audioSource === 'string') {\n                myConstraints.constraints.audio = { deviceId: { exact: audioSource } };\n            }\n            if (typeof videoSource === 'string') {\n                if (!_this.isScreenShare(videoSource)) {\n                    if (!myConstraints.constraints.video) {\n                        myConstraints.constraints.video = {};\n                    }\n                    myConstraints.constraints.video['deviceId'] = { exact: videoSource };\n                }\n                else {\n                    // Screen sharing\n                    if (!_this.checkScreenSharingCapabilities()) {\n                        var error = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_SHARING_NOT_SUPPORTED, 'You can only screen share in desktop Chrome, Firefox, Opera or Electron. Detected client: ' + platform.name);\n                        console.error(error);\n                        reject(error);\n                    }\n                    else {\n                        if (platform.name === 'Electron') {\n                            var prefix = \"screen:\";\n                            var videoSourceString = videoSource;\n                            var electronScreenId = videoSourceString.substr(videoSourceString.indexOf(prefix) + prefix.length);\n                            myConstraints.constraints.video = {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: electronScreenId\n                                }\n                            };\n                            resolve(myConstraints);\n                        }\n                        else {\n                            if (!!_this.advancedConfiguration.screenShareChromeExtension && !(platform.name.indexOf('Firefox') !== -1) && !navigator.mediaDevices['getDisplayMedia']) {\n                                // Custom screen sharing extension for Chrome (and Opera) and no support for MediaDevices.getDisplayMedia()\n                                screenSharing.getScreenConstraints(function (error, screenConstraints) {\n                                    if (!!error || !!screenConstraints.mandatory && screenConstraints.mandatory.chromeMediaSource === 'screen') {\n                                        if (error === 'permission-denied' || error === 'PermissionDeniedError') {\n                                            var error_1 = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED, 'You must allow access to one window of your desktop');\n                                            console.error(error_1);\n                                            reject(error_1);\n                                        }\n                                        else {\n                                            var extensionId = _this.advancedConfiguration.screenShareChromeExtension.split('/').pop().trim();\n                                            screenSharing.getChromeExtensionStatus(extensionId, function (status) {\n                                                if (status === 'installed-disabled') {\n                                                    var error_2 = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_EXTENSION_DISABLED, 'You must enable the screen extension');\n                                                    console.error(error_2);\n                                                    reject(error_2);\n                                                }\n                                                if (status === 'not-installed') {\n                                                    var error_3 = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_EXTENSION_NOT_INSTALLED, _this.advancedConfiguration.screenShareChromeExtension);\n                                                    console.error(error_3);\n                                                    reject(error_3);\n                                                }\n                                            });\n                                            return;\n                                        }\n                                    }\n                                    else {\n                                        myConstraints.constraints.video = screenConstraints;\n                                        resolve(myConstraints);\n                                    }\n                                });\n                                return;\n                            }\n                            else {\n                                if (navigator.mediaDevices['getDisplayMedia']) {\n                                    // getDisplayMedia support (Chrome >= 72, Firefox >= 66)\n                                    resolve(myConstraints);\n                                }\n                                else {\n                                    // Default screen sharing extension for Chrome/Opera, or is Firefox < 66\n                                    var firefoxString = platform.name.indexOf('Firefox') !== -1 ? publisherProperties.videoSource : undefined;\n                                    screenSharingAuto.getScreenId(firefoxString, function (error, sourceId, screenConstraints) {\n                                        if (!!error) {\n                                            if (error === 'not-installed') {\n                                                var extensionUrl = !!_this.advancedConfiguration.screenShareChromeExtension ? _this.advancedConfiguration.screenShareChromeExtension :\n                                                    'https://chrome.google.com/webstore/detail/openvidu-screensharing/lfcgfepafnobdloecchnfaclibenjold';\n                                                var err = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_EXTENSION_NOT_INSTALLED, extensionUrl);\n                                                console.error(err);\n                                                reject(err);\n                                            }\n                                            else if (error === 'installed-disabled') {\n                                                var err = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_EXTENSION_DISABLED, 'You must enable the screen extension');\n                                                console.error(err);\n                                                reject(err);\n                                            }\n                                            else if (error === 'permission-denied') {\n                                                var err = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED, 'You must allow access to one window of your desktop');\n                                                console.error(err);\n                                                reject(err);\n                                            }\n                                            else {\n                                                var err = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.GENERIC_ERROR, 'Unknown error when accessing screen share');\n                                                console.error(err);\n                                                console.error(error);\n                                                reject(err);\n                                            }\n                                        }\n                                        else {\n                                            myConstraints.constraints.video = screenConstraints.video;\n                                            resolve(myConstraints);\n                                        }\n                                    });\n                                    return;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            resolve(myConstraints);\n        });\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.startWs = function (onConnectSucces) {\n        var config = {\n            heartbeat: 5000,\n            sendCloseMessage: false,\n            ws: {\n                uri: this.wsUri,\n                onconnected: onConnectSucces,\n                ondisconnect: this.disconnectCallback.bind(this),\n                onreconnecting: this.reconnectingCallback.bind(this),\n                onreconnected: this.reconnectedCallback.bind(this)\n            },\n            rpc: {\n                requestTimeout: 10000,\n                participantJoined: this.session.onParticipantJoined.bind(this.session),\n                participantPublished: this.session.onParticipantPublished.bind(this.session),\n                participantUnpublished: this.session.onParticipantUnpublished.bind(this.session),\n                participantLeft: this.session.onParticipantLeft.bind(this.session),\n                participantEvicted: this.session.onParticipantEvicted.bind(this.session),\n                recordingStarted: this.session.onRecordingStarted.bind(this.session),\n                recordingStopped: this.session.onRecordingStopped.bind(this.session),\n                sendMessage: this.session.onNewMessage.bind(this.session),\n                streamPropertyChanged: this.session.onStreamPropertyChanged.bind(this.session),\n                filterEventDispatched: this.session.onFilterEventDispatched.bind(this.session),\n                iceCandidate: this.session.recvIceCandidate.bind(this.session),\n                mediaError: this.session.onMediaError.bind(this.session)\n            }\n        };\n        this.jsonRpcClient = new RpcBuilder.clients.JsonRpcClient(config);\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.closeWs = function () {\n        this.jsonRpcClient.close(4102, \"Connection closed by client\");\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.sendRequest = function (method, params, callback) {\n        if (params && params instanceof Function) {\n            callback = params;\n            params = {};\n        }\n        console.debug('Sending request: {method:\"' + method + '\", params: ' + JSON.stringify(params) + '}');\n        this.jsonRpcClient.send(method, params, callback);\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.getWsUri = function () {\n        return this.wsUri;\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.getSecret = function () {\n        return this.secret;\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.getRecorder = function () {\n        return this.recorder;\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.generateAudioDeviceError = function (error, constraints) {\n        if (error.name === 'Error') {\n            // Safari OverConstrainedError has as name property 'Error' instead of 'OverConstrainedError'\n            error.name = error.constructor.name;\n        }\n        var errorName, errorMessage;\n        switch (error.name.toLowerCase()) {\n            case 'notfounderror':\n                errorName = OpenViduError_1.OpenViduErrorName.INPUT_AUDIO_DEVICE_NOT_FOUND;\n                errorMessage = error.toString();\n                return new OpenViduError_1.OpenViduError(errorName, errorMessage);\n            case 'notallowederror':\n                errorName = OpenViduError_1.OpenViduErrorName.DEVICE_ACCESS_DENIED;\n                errorMessage = error.toString();\n                return new OpenViduError_1.OpenViduError(errorName, errorMessage);\n            case 'overconstrainederror':\n                if (error.constraint.toLowerCase() === 'deviceid') {\n                    errorName = OpenViduError_1.OpenViduErrorName.INPUT_AUDIO_DEVICE_NOT_FOUND;\n                    errorMessage = \"Audio input device with deviceId '\" + constraints.audio.deviceId.exact + \"' not found\";\n                }\n                else {\n                    errorName = OpenViduError_1.OpenViduErrorName.PUBLISHER_PROPERTIES_ERROR;\n                    errorMessage = \"Audio input device doesn't support the value passed for constraint '\" + error.constraint + \"'\";\n                }\n                return new OpenViduError_1.OpenViduError(errorName, errorMessage);\n            case 'notreadableerror':\n                errorName = OpenViduError_1.OpenViduErrorName.DEVICE_ALREADY_IN_USE;\n                errorMessage = error.toString();\n                return (new OpenViduError_1.OpenViduError(errorName, errorMessage));\n            default:\n                return new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.INPUT_AUDIO_DEVICE_GENERIC_ERROR, error.toString());\n        }\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.addAlreadyProvidedTracks = function (myConstraints, mediaStream) {\n        if (!!myConstraints.videoTrack) {\n            mediaStream.addTrack(myConstraints.videoTrack);\n        }\n        if (!!myConstraints.audioTrack) {\n            mediaStream.addTrack(myConstraints.audioTrack);\n        }\n        return mediaStream;\n    };\n    /* Private methods */\n    OpenVidu.prototype.disconnectCallback = function () {\n        console.warn('Websocket connection lost');\n        if (this.isRoomAvailable()) {\n            this.session.onLostConnection('networkDisconnect');\n        }\n        else {\n            alert('Connection error. Please reload page.');\n        }\n    };\n    OpenVidu.prototype.reconnectingCallback = function () {\n        console.warn('Websocket connection lost (reconnecting)');\n        if (!this.isRoomAvailable()) {\n            alert('Connection error. Please reload page.');\n        }\n        else {\n            this.session.emitEvent('reconnecting', []);\n        }\n    };\n    OpenVidu.prototype.reconnectedCallback = function () {\n        var _this = this;\n        console.warn('Websocket reconnected');\n        if (this.isRoomAvailable()) {\n            this.sendRequest('connect', { sessionId: this.session.connection.rpcSessionId }, function (error, response) {\n                if (!!error) {\n                    console.error(error);\n                    console.warn('Websocket was able to reconnect to OpenVidu Server, but your Connection was already destroyed due to timeout. You are no longer a participant of the Session and your media streams have been destroyed');\n                    _this.session.onLostConnection(\"networkDisconnect\");\n                    _this.jsonRpcClient.close(4101, \"Reconnection fault\");\n                }\n                else {\n                    _this.jsonRpcClient.resetPing();\n                    _this.session.onRecoveredConnection();\n                }\n            });\n        }\n        else {\n            alert('Connection error. Please reload page.');\n        }\n    };\n    OpenVidu.prototype.isRoomAvailable = function () {\n        if (this.session !== undefined && this.session instanceof Session_1.Session) {\n            return true;\n        }\n        else {\n            console.warn('Session instance not found');\n            return false;\n        }\n    };\n    OpenVidu.prototype.isScreenShare = function (videoSource) {\n        return videoSource === 'screen' ||\n            videoSource === 'window' ||\n            (platform.name === 'Electron' && videoSource.startsWith('screen:'));\n    };\n    return OpenVidu;\n}());\nexports.OpenVidu = OpenVidu;\n//# sourceMappingURL=OpenVidu.js.map"]},"metadata":{},"sourceType":"script"}