{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2020 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nexports.__esModule = true;\n\nvar platform = require(\"platform\");\n\nvar WebRtcStats =\n/** @class */\nfunction () {\n  function WebRtcStats(stream) {\n    this.stream = stream;\n    this.webRtcStatsEnabled = false;\n    this.statsInterval = 1;\n    this.stats = {\n      inbound: {\n        audio: {\n          bytesReceived: 0,\n          packetsReceived: 0,\n          packetsLost: 0\n        },\n        video: {\n          bytesReceived: 0,\n          packetsReceived: 0,\n          packetsLost: 0,\n          framesDecoded: 0,\n          nackCount: 0\n        }\n      },\n      outbound: {\n        audio: {\n          bytesSent: 0,\n          packetsSent: 0\n        },\n        video: {\n          bytesSent: 0,\n          packetsSent: 0,\n          framesEncoded: 0,\n          nackCount: 0\n        }\n      }\n    };\n  }\n\n  WebRtcStats.prototype.isEnabled = function () {\n    return this.webRtcStatsEnabled;\n  };\n\n  WebRtcStats.prototype.initWebRtcStats = function () {\n    var _this = this;\n\n    var elastestInstrumentation = localStorage.getItem('elastest-instrumentation');\n\n    if (!!elastestInstrumentation) {\n      // ElasTest instrumentation object found in local storage\n      console.warn('WebRtc stats enabled for stream ' + this.stream.streamId + ' of connection ' + this.stream.connection.connectionId);\n      this.webRtcStatsEnabled = true;\n      var instrumentation_1 = JSON.parse(elastestInstrumentation);\n      this.statsInterval = instrumentation_1.webrtc.interval; // Interval in seconds\n\n      console.warn('localStorage item: ' + JSON.stringify(instrumentation_1));\n      this.webRtcStatsIntervalId = setInterval(function () {\n        _this.sendStatsToHttpEndpoint(instrumentation_1);\n      }, this.statsInterval * 1000);\n      return;\n    }\n\n    console.debug('WebRtc stats not enabled');\n  };\n\n  WebRtcStats.prototype.stopWebRtcStats = function () {\n    if (this.webRtcStatsEnabled) {\n      clearInterval(this.webRtcStatsIntervalId);\n      console.warn('WebRtc stats stopped for disposed stream ' + this.stream.streamId + ' of connection ' + this.stream.connection.connectionId);\n    }\n  };\n\n  WebRtcStats.prototype.getSelectedIceCandidateInfo = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.getStatsAgnostic(_this.stream.getRTCPeerConnection(), function (stats) {\n        if (platform.name.indexOf('Chrome') !== -1 || platform.name.indexOf('Opera') !== -1) {\n          var localCandidateId = void 0,\n              remoteCandidateId = void 0,\n              googCandidatePair = void 0;\n          var localCandidates = {};\n          var remoteCandidates = {};\n\n          for (var key in stats) {\n            var stat = stats[key];\n\n            if (stat.type === 'localcandidate') {\n              localCandidates[stat.id] = stat;\n            } else if (stat.type === 'remotecandidate') {\n              remoteCandidates[stat.id] = stat;\n            } else if (stat.type === 'googCandidatePair' && stat.googActiveConnection === 'true') {\n              googCandidatePair = stat;\n              localCandidateId = stat.localCandidateId;\n              remoteCandidateId = stat.remoteCandidateId;\n            }\n          }\n\n          var finalLocalCandidate_1 = localCandidates[localCandidateId];\n\n          if (!!finalLocalCandidate_1) {\n            var candList = _this.stream.getLocalIceCandidateList();\n\n            var cand = candList.filter(function (c) {\n              return !!c.candidate && c.candidate.indexOf(finalLocalCandidate_1.ipAddress) >= 0 && c.candidate.indexOf(finalLocalCandidate_1.portNumber) >= 0 && c.candidate.indexOf(finalLocalCandidate_1.priority) >= 0;\n            });\n            finalLocalCandidate_1.raw = !!cand[0] ? cand[0].candidate : 'ERROR: Cannot find local candidate in list of sent ICE candidates';\n          } else {\n            finalLocalCandidate_1 = 'ERROR: No active local ICE candidate. Probably ICE-TCP is being used';\n          }\n\n          var finalRemoteCandidate_1 = remoteCandidates[remoteCandidateId];\n\n          if (!!finalRemoteCandidate_1) {\n            var candList = _this.stream.getRemoteIceCandidateList();\n\n            var cand = candList.filter(function (c) {\n              return !!c.candidate && c.candidate.indexOf(finalRemoteCandidate_1.ipAddress) >= 0 && c.candidate.indexOf(finalRemoteCandidate_1.portNumber) >= 0 && c.candidate.indexOf(finalRemoteCandidate_1.priority) >= 0;\n            });\n            finalRemoteCandidate_1.raw = !!cand[0] ? cand[0].candidate : 'ERROR: Cannot find remote candidate in list of received ICE candidates';\n          } else {\n            finalRemoteCandidate_1 = 'ERROR: No active remote ICE candidate. Probably ICE-TCP is being used';\n          }\n\n          resolve({\n            googCandidatePair: googCandidatePair,\n            localCandidate: finalLocalCandidate_1,\n            remoteCandidate: finalRemoteCandidate_1\n          });\n        } else {\n          reject('Selected ICE candidate info only available for Chrome');\n        }\n      }, function (error) {\n        reject(error);\n      });\n    });\n  };\n\n  WebRtcStats.prototype.sendStatsToHttpEndpoint = function (instrumentation) {\n    var _this = this;\n\n    var sendPost = function sendPost(json) {\n      var http = new XMLHttpRequest();\n      var url = instrumentation.webrtc.httpEndpoint;\n      http.open('POST', url, true);\n      http.setRequestHeader('Content-type', 'application/json');\n\n      http.onreadystatechange = function () {\n        if (http.readyState === 4 && http.status === 200) {\n          console.log('WebRtc stats successfully sent to ' + url + ' for stream ' + _this.stream.streamId + ' of connection ' + _this.stream.connection.connectionId);\n        }\n      };\n\n      http.send(json);\n    };\n\n    var f = function f(stats) {\n      if (platform.name.indexOf('Firefox') !== -1) {\n        stats.forEach(function (stat) {\n          var json = {};\n\n          if (stat.type === 'inbound-rtp' && // Avoid firefox empty outbound-rtp statistics\n          stat.nackCount !== null && stat.isRemote === false && stat.id.startsWith('inbound') && stat.remoteId.startsWith('inbound')) {\n            var metricId = 'webrtc_inbound_' + stat.mediaType + '_' + stat.ssrc;\n            var jit = stat.jitter * 1000;\n            var metrics = {\n              bytesReceived: (stat.bytesReceived - _this.stats.inbound[stat.mediaType].bytesReceived) / _this.statsInterval,\n              jitter: jit,\n              packetsReceived: (stat.packetsReceived - _this.stats.inbound[stat.mediaType].packetsReceived) / _this.statsInterval,\n              packetsLost: (stat.packetsLost - _this.stats.inbound[stat.mediaType].packetsLost) / _this.statsInterval\n            };\n            var units = {\n              bytesReceived: 'bytes',\n              jitter: 'ms',\n              packetsReceived: 'packets',\n              packetsLost: 'packets'\n            };\n\n            if (stat.mediaType === 'video') {\n              metrics['framesDecoded'] = (stat.framesDecoded - _this.stats.inbound.video.framesDecoded) / _this.statsInterval;\n              metrics['nackCount'] = (stat.nackCount - _this.stats.inbound.video.nackCount) / _this.statsInterval;\n              units['framesDecoded'] = 'frames';\n              units['nackCount'] = 'packets';\n              _this.stats.inbound.video.framesDecoded = stat.framesDecoded;\n              _this.stats.inbound.video.nackCount = stat.nackCount;\n            }\n\n            _this.stats.inbound[stat.mediaType].bytesReceived = stat.bytesReceived;\n            _this.stats.inbound[stat.mediaType].packetsReceived = stat.packetsReceived;\n            _this.stats.inbound[stat.mediaType].packetsLost = stat.packetsLost;\n            json = {\n              '@timestamp': new Date(stat.timestamp).toISOString(),\n              'exec': instrumentation.exec,\n              'component': instrumentation.component,\n              'stream': 'webRtc',\n              'et_type': metricId,\n              'stream_type': 'composed_metrics',\n              'units': units\n            };\n            json[metricId] = metrics;\n            sendPost(JSON.stringify(json));\n          } else if (stat.type === 'outbound-rtp' && // Avoid firefox empty inbound-rtp statistics\n          stat.isRemote === false && stat.id.toLowerCase().includes('outbound')) {\n            var metricId = 'webrtc_outbound_' + stat.mediaType + '_' + stat.ssrc;\n            var metrics = {\n              bytesSent: (stat.bytesSent - _this.stats.outbound[stat.mediaType].bytesSent) / _this.statsInterval,\n              packetsSent: (stat.packetsSent - _this.stats.outbound[stat.mediaType].packetsSent) / _this.statsInterval\n            };\n            var units = {\n              bytesSent: 'bytes',\n              packetsSent: 'packets'\n            };\n\n            if (stat.mediaType === 'video') {\n              metrics['framesEncoded'] = (stat.framesEncoded - _this.stats.outbound.video.framesEncoded) / _this.statsInterval;\n              units['framesEncoded'] = 'frames';\n              _this.stats.outbound.video.framesEncoded = stat.framesEncoded;\n            }\n\n            _this.stats.outbound[stat.mediaType].bytesSent = stat.bytesSent;\n            _this.stats.outbound[stat.mediaType].packetsSent = stat.packetsSent;\n            json = {\n              '@timestamp': new Date(stat.timestamp).toISOString(),\n              'exec': instrumentation.exec,\n              'component': instrumentation.component,\n              'stream': 'webRtc',\n              'et_type': metricId,\n              'stream_type': 'composed_metrics',\n              'units': units\n            };\n            json[metricId] = metrics;\n            sendPost(JSON.stringify(json));\n          }\n        });\n      } else if (platform.name.indexOf('Chrome') !== -1 || platform.name.indexOf('Opera') !== -1) {\n        for (var _i = 0, _a = Object.keys(stats); _i < _a.length; _i++) {\n          var key = _a[_i];\n          var stat = stats[key];\n\n          if (stat.type === 'ssrc') {\n            var json = {};\n\n            if ('bytesReceived' in stat && (stat.mediaType === 'audio' && 'audioOutputLevel' in stat || stat.mediaType === 'video' && 'qpSum' in stat)) {\n              // inbound-rtp\n              var metricId = 'webrtc_inbound_' + stat.mediaType + '_' + stat.ssrc;\n              var metrics = {\n                bytesReceived: (stat.bytesReceived - _this.stats.inbound[stat.mediaType].bytesReceived) / _this.statsInterval,\n                jitter: stat.googJitterBufferMs,\n                packetsReceived: (stat.packetsReceived - _this.stats.inbound[stat.mediaType].packetsReceived) / _this.statsInterval,\n                packetsLost: (stat.packetsLost - _this.stats.inbound[stat.mediaType].packetsLost) / _this.statsInterval\n              };\n              var units = {\n                bytesReceived: 'bytes',\n                jitter: 'ms',\n                packetsReceived: 'packets',\n                packetsLost: 'packets'\n              };\n\n              if (stat.mediaType === 'video') {\n                metrics['framesDecoded'] = (stat.framesDecoded - _this.stats.inbound.video.framesDecoded) / _this.statsInterval;\n                metrics['nackCount'] = (stat.googNacksSent - _this.stats.inbound.video.nackCount) / _this.statsInterval;\n                units['framesDecoded'] = 'frames';\n                units['nackCount'] = 'packets';\n                _this.stats.inbound.video.framesDecoded = stat.framesDecoded;\n                _this.stats.inbound.video.nackCount = stat.googNacksSent;\n              }\n\n              _this.stats.inbound[stat.mediaType].bytesReceived = stat.bytesReceived;\n              _this.stats.inbound[stat.mediaType].packetsReceived = stat.packetsReceived;\n              _this.stats.inbound[stat.mediaType].packetsLost = stat.packetsLost;\n              json = {\n                '@timestamp': new Date(stat.timestamp).toISOString(),\n                'exec': instrumentation.exec,\n                'component': instrumentation.component,\n                'stream': 'webRtc',\n                'et_type': metricId,\n                'stream_type': 'composed_metrics',\n                'units': units\n              };\n              json[metricId] = metrics;\n              sendPost(JSON.stringify(json));\n            } else if ('bytesSent' in stat) {\n              // outbound-rtp\n              var metricId = 'webrtc_outbound_' + stat.mediaType + '_' + stat.ssrc;\n              var metrics = {\n                bytesSent: (stat.bytesSent - _this.stats.outbound[stat.mediaType].bytesSent) / _this.statsInterval,\n                packetsSent: (stat.packetsSent - _this.stats.outbound[stat.mediaType].packetsSent) / _this.statsInterval\n              };\n              var units = {\n                bytesSent: 'bytes',\n                packetsSent: 'packets'\n              };\n\n              if (stat.mediaType === 'video') {\n                metrics['framesEncoded'] = (stat.framesEncoded - _this.stats.outbound.video.framesEncoded) / _this.statsInterval;\n                units['framesEncoded'] = 'frames';\n                _this.stats.outbound.video.framesEncoded = stat.framesEncoded;\n              }\n\n              _this.stats.outbound[stat.mediaType].bytesSent = stat.bytesSent;\n              _this.stats.outbound[stat.mediaType].packetsSent = stat.packetsSent;\n              json = {\n                '@timestamp': new Date(stat.timestamp).toISOString(),\n                'exec': instrumentation.exec,\n                'component': instrumentation.component,\n                'stream': 'webRtc',\n                'et_type': metricId,\n                'stream_type': 'composed_metrics',\n                'units': units\n              };\n              json[metricId] = metrics;\n              sendPost(JSON.stringify(json));\n            }\n          }\n        }\n      }\n    };\n\n    this.getStatsAgnostic(this.stream.getRTCPeerConnection(), f, function (error) {\n      console.log(error);\n    });\n  };\n\n  WebRtcStats.prototype.standardizeReport = function (response) {\n    console.log(response);\n    var standardReport = {};\n\n    if (platform.name.indexOf('Firefox') !== -1) {\n      Object.keys(response).forEach(function (key) {\n        console.log(response[key]);\n      });\n      return response;\n    }\n\n    response.result().forEach(function (report) {\n      var standardStats = {\n        id: report.id,\n        timestamp: report.timestamp,\n        type: report.type\n      };\n      report.names().forEach(function (name) {\n        standardStats[name] = report.stat(name);\n      });\n      standardReport[standardStats.id] = standardStats;\n    });\n    return standardReport;\n  };\n\n  WebRtcStats.prototype.getStatsAgnostic = function (pc, successCb, failureCb) {\n    var _this = this;\n\n    if (platform.name.indexOf('Firefox') !== -1) {\n      // getStats takes args in different order in Chrome and Firefox\n      return pc.getStats(null).then(function (response) {\n        var report = _this.standardizeReport(response);\n\n        successCb(report);\n      })[\"catch\"](failureCb);\n    } else if (platform.name.indexOf('Chrome') !== -1 || platform.name.indexOf('Opera') !== -1) {\n      // In Chrome, the first two arguments are reversed\n      return pc.getStats(function (response) {\n        var report = _this.standardizeReport(response);\n\n        successCb(report);\n      }, null, failureCb);\n    }\n  };\n\n  return WebRtcStats;\n}();\n\nexports.WebRtcStats = WebRtcStats;","map":{"version":3,"sources":["../../../src/OpenViduInternal/WebRtcStats/WebRtcStats.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * (C) Copyright 2017-2020 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nexports.__esModule = true;\nvar platform = require(\"platform\");\nvar WebRtcStats = /** @class */ (function () {\n    function WebRtcStats(stream) {\n        this.stream = stream;\n        this.webRtcStatsEnabled = false;\n        this.statsInterval = 1;\n        this.stats = {\n            inbound: {\n                audio: {\n                    bytesReceived: 0,\n                    packetsReceived: 0,\n                    packetsLost: 0\n                },\n                video: {\n                    bytesReceived: 0,\n                    packetsReceived: 0,\n                    packetsLost: 0,\n                    framesDecoded: 0,\n                    nackCount: 0\n                }\n            },\n            outbound: {\n                audio: {\n                    bytesSent: 0,\n                    packetsSent: 0\n                },\n                video: {\n                    bytesSent: 0,\n                    packetsSent: 0,\n                    framesEncoded: 0,\n                    nackCount: 0\n                }\n            }\n        };\n    }\n    WebRtcStats.prototype.isEnabled = function () {\n        return this.webRtcStatsEnabled;\n    };\n    WebRtcStats.prototype.initWebRtcStats = function () {\n        var _this = this;\n        var elastestInstrumentation = localStorage.getItem('elastest-instrumentation');\n        if (!!elastestInstrumentation) {\n            // ElasTest instrumentation object found in local storage\n            console.warn('WebRtc stats enabled for stream ' + this.stream.streamId + ' of connection ' + this.stream.connection.connectionId);\n            this.webRtcStatsEnabled = true;\n            var instrumentation_1 = JSON.parse(elastestInstrumentation);\n            this.statsInterval = instrumentation_1.webrtc.interval; // Interval in seconds\n            console.warn('localStorage item: ' + JSON.stringify(instrumentation_1));\n            this.webRtcStatsIntervalId = setInterval(function () {\n                _this.sendStatsToHttpEndpoint(instrumentation_1);\n            }, this.statsInterval * 1000);\n            return;\n        }\n        console.debug('WebRtc stats not enabled');\n    };\n    WebRtcStats.prototype.stopWebRtcStats = function () {\n        if (this.webRtcStatsEnabled) {\n            clearInterval(this.webRtcStatsIntervalId);\n            console.warn('WebRtc stats stopped for disposed stream ' + this.stream.streamId + ' of connection ' + this.stream.connection.connectionId);\n        }\n    };\n    WebRtcStats.prototype.getSelectedIceCandidateInfo = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.getStatsAgnostic(_this.stream.getRTCPeerConnection(), function (stats) {\n                if ((platform.name.indexOf('Chrome') !== -1) || (platform.name.indexOf('Opera') !== -1)) {\n                    var localCandidateId = void 0, remoteCandidateId = void 0, googCandidatePair = void 0;\n                    var localCandidates = {};\n                    var remoteCandidates = {};\n                    for (var key in stats) {\n                        var stat = stats[key];\n                        if (stat.type === 'localcandidate') {\n                            localCandidates[stat.id] = stat;\n                        }\n                        else if (stat.type === 'remotecandidate') {\n                            remoteCandidates[stat.id] = stat;\n                        }\n                        else if (stat.type === 'googCandidatePair' && (stat.googActiveConnection === 'true')) {\n                            googCandidatePair = stat;\n                            localCandidateId = stat.localCandidateId;\n                            remoteCandidateId = stat.remoteCandidateId;\n                        }\n                    }\n                    var finalLocalCandidate_1 = localCandidates[localCandidateId];\n                    if (!!finalLocalCandidate_1) {\n                        var candList = _this.stream.getLocalIceCandidateList();\n                        var cand = candList.filter(function (c) {\n                            return (!!c.candidate &&\n                                c.candidate.indexOf(finalLocalCandidate_1.ipAddress) >= 0 &&\n                                c.candidate.indexOf(finalLocalCandidate_1.portNumber) >= 0 &&\n                                c.candidate.indexOf(finalLocalCandidate_1.priority) >= 0);\n                        });\n                        finalLocalCandidate_1.raw = !!cand[0] ? cand[0].candidate : 'ERROR: Cannot find local candidate in list of sent ICE candidates';\n                    }\n                    else {\n                        finalLocalCandidate_1 = 'ERROR: No active local ICE candidate. Probably ICE-TCP is being used';\n                    }\n                    var finalRemoteCandidate_1 = remoteCandidates[remoteCandidateId];\n                    if (!!finalRemoteCandidate_1) {\n                        var candList = _this.stream.getRemoteIceCandidateList();\n                        var cand = candList.filter(function (c) {\n                            return (!!c.candidate &&\n                                c.candidate.indexOf(finalRemoteCandidate_1.ipAddress) >= 0 &&\n                                c.candidate.indexOf(finalRemoteCandidate_1.portNumber) >= 0 &&\n                                c.candidate.indexOf(finalRemoteCandidate_1.priority) >= 0);\n                        });\n                        finalRemoteCandidate_1.raw = !!cand[0] ? cand[0].candidate : 'ERROR: Cannot find remote candidate in list of received ICE candidates';\n                    }\n                    else {\n                        finalRemoteCandidate_1 = 'ERROR: No active remote ICE candidate. Probably ICE-TCP is being used';\n                    }\n                    resolve({\n                        googCandidatePair: googCandidatePair,\n                        localCandidate: finalLocalCandidate_1,\n                        remoteCandidate: finalRemoteCandidate_1\n                    });\n                }\n                else {\n                    reject('Selected ICE candidate info only available for Chrome');\n                }\n            }, function (error) {\n                reject(error);\n            });\n        });\n    };\n    WebRtcStats.prototype.sendStatsToHttpEndpoint = function (instrumentation) {\n        var _this = this;\n        var sendPost = function (json) {\n            var http = new XMLHttpRequest();\n            var url = instrumentation.webrtc.httpEndpoint;\n            http.open('POST', url, true);\n            http.setRequestHeader('Content-type', 'application/json');\n            http.onreadystatechange = function () {\n                if (http.readyState === 4 && http.status === 200) {\n                    console.log('WebRtc stats successfully sent to ' + url + ' for stream ' + _this.stream.streamId + ' of connection ' + _this.stream.connection.connectionId);\n                }\n            };\n            http.send(json);\n        };\n        var f = function (stats) {\n            if (platform.name.indexOf('Firefox') !== -1) {\n                stats.forEach(function (stat) {\n                    var json = {};\n                    if ((stat.type === 'inbound-rtp') &&\n                        (\n                        // Avoid firefox empty outbound-rtp statistics\n                        stat.nackCount !== null &&\n                            stat.isRemote === false &&\n                            stat.id.startsWith('inbound') &&\n                            stat.remoteId.startsWith('inbound'))) {\n                        var metricId = 'webrtc_inbound_' + stat.mediaType + '_' + stat.ssrc;\n                        var jit = stat.jitter * 1000;\n                        var metrics = {\n                            bytesReceived: (stat.bytesReceived - _this.stats.inbound[stat.mediaType].bytesReceived) / _this.statsInterval,\n                            jitter: jit,\n                            packetsReceived: (stat.packetsReceived - _this.stats.inbound[stat.mediaType].packetsReceived) / _this.statsInterval,\n                            packetsLost: (stat.packetsLost - _this.stats.inbound[stat.mediaType].packetsLost) / _this.statsInterval\n                        };\n                        var units = {\n                            bytesReceived: 'bytes',\n                            jitter: 'ms',\n                            packetsReceived: 'packets',\n                            packetsLost: 'packets'\n                        };\n                        if (stat.mediaType === 'video') {\n                            metrics['framesDecoded'] = (stat.framesDecoded - _this.stats.inbound.video.framesDecoded) / _this.statsInterval;\n                            metrics['nackCount'] = (stat.nackCount - _this.stats.inbound.video.nackCount) / _this.statsInterval;\n                            units['framesDecoded'] = 'frames';\n                            units['nackCount'] = 'packets';\n                            _this.stats.inbound.video.framesDecoded = stat.framesDecoded;\n                            _this.stats.inbound.video.nackCount = stat.nackCount;\n                        }\n                        _this.stats.inbound[stat.mediaType].bytesReceived = stat.bytesReceived;\n                        _this.stats.inbound[stat.mediaType].packetsReceived = stat.packetsReceived;\n                        _this.stats.inbound[stat.mediaType].packetsLost = stat.packetsLost;\n                        json = {\n                            '@timestamp': new Date(stat.timestamp).toISOString(),\n                            'exec': instrumentation.exec,\n                            'component': instrumentation.component,\n                            'stream': 'webRtc',\n                            'et_type': metricId,\n                            'stream_type': 'composed_metrics',\n                            'units': units\n                        };\n                        json[metricId] = metrics;\n                        sendPost(JSON.stringify(json));\n                    }\n                    else if ((stat.type === 'outbound-rtp') &&\n                        (\n                        // Avoid firefox empty inbound-rtp statistics\n                        stat.isRemote === false &&\n                            stat.id.toLowerCase().includes('outbound'))) {\n                        var metricId = 'webrtc_outbound_' + stat.mediaType + '_' + stat.ssrc;\n                        var metrics = {\n                            bytesSent: (stat.bytesSent - _this.stats.outbound[stat.mediaType].bytesSent) / _this.statsInterval,\n                            packetsSent: (stat.packetsSent - _this.stats.outbound[stat.mediaType].packetsSent) / _this.statsInterval\n                        };\n                        var units = {\n                            bytesSent: 'bytes',\n                            packetsSent: 'packets'\n                        };\n                        if (stat.mediaType === 'video') {\n                            metrics['framesEncoded'] = (stat.framesEncoded - _this.stats.outbound.video.framesEncoded) / _this.statsInterval;\n                            units['framesEncoded'] = 'frames';\n                            _this.stats.outbound.video.framesEncoded = stat.framesEncoded;\n                        }\n                        _this.stats.outbound[stat.mediaType].bytesSent = stat.bytesSent;\n                        _this.stats.outbound[stat.mediaType].packetsSent = stat.packetsSent;\n                        json = {\n                            '@timestamp': new Date(stat.timestamp).toISOString(),\n                            'exec': instrumentation.exec,\n                            'component': instrumentation.component,\n                            'stream': 'webRtc',\n                            'et_type': metricId,\n                            'stream_type': 'composed_metrics',\n                            'units': units\n                        };\n                        json[metricId] = metrics;\n                        sendPost(JSON.stringify(json));\n                    }\n                });\n            }\n            else if ((platform.name.indexOf('Chrome') !== -1) || (platform.name.indexOf('Opera') !== -1)) {\n                for (var _i = 0, _a = Object.keys(stats); _i < _a.length; _i++) {\n                    var key = _a[_i];\n                    var stat = stats[key];\n                    if (stat.type === 'ssrc') {\n                        var json = {};\n                        if ('bytesReceived' in stat && ((stat.mediaType === 'audio' && 'audioOutputLevel' in stat) ||\n                            (stat.mediaType === 'video' && 'qpSum' in stat))) {\n                            // inbound-rtp\n                            var metricId = 'webrtc_inbound_' + stat.mediaType + '_' + stat.ssrc;\n                            var metrics = {\n                                bytesReceived: (stat.bytesReceived - _this.stats.inbound[stat.mediaType].bytesReceived) / _this.statsInterval,\n                                jitter: stat.googJitterBufferMs,\n                                packetsReceived: (stat.packetsReceived - _this.stats.inbound[stat.mediaType].packetsReceived) / _this.statsInterval,\n                                packetsLost: (stat.packetsLost - _this.stats.inbound[stat.mediaType].packetsLost) / _this.statsInterval\n                            };\n                            var units = {\n                                bytesReceived: 'bytes',\n                                jitter: 'ms',\n                                packetsReceived: 'packets',\n                                packetsLost: 'packets'\n                            };\n                            if (stat.mediaType === 'video') {\n                                metrics['framesDecoded'] = (stat.framesDecoded - _this.stats.inbound.video.framesDecoded) / _this.statsInterval;\n                                metrics['nackCount'] = (stat.googNacksSent - _this.stats.inbound.video.nackCount) / _this.statsInterval;\n                                units['framesDecoded'] = 'frames';\n                                units['nackCount'] = 'packets';\n                                _this.stats.inbound.video.framesDecoded = stat.framesDecoded;\n                                _this.stats.inbound.video.nackCount = stat.googNacksSent;\n                            }\n                            _this.stats.inbound[stat.mediaType].bytesReceived = stat.bytesReceived;\n                            _this.stats.inbound[stat.mediaType].packetsReceived = stat.packetsReceived;\n                            _this.stats.inbound[stat.mediaType].packetsLost = stat.packetsLost;\n                            json = {\n                                '@timestamp': new Date(stat.timestamp).toISOString(),\n                                'exec': instrumentation.exec,\n                                'component': instrumentation.component,\n                                'stream': 'webRtc',\n                                'et_type': metricId,\n                                'stream_type': 'composed_metrics',\n                                'units': units\n                            };\n                            json[metricId] = metrics;\n                            sendPost(JSON.stringify(json));\n                        }\n                        else if ('bytesSent' in stat) {\n                            // outbound-rtp\n                            var metricId = 'webrtc_outbound_' + stat.mediaType + '_' + stat.ssrc;\n                            var metrics = {\n                                bytesSent: (stat.bytesSent - _this.stats.outbound[stat.mediaType].bytesSent) / _this.statsInterval,\n                                packetsSent: (stat.packetsSent - _this.stats.outbound[stat.mediaType].packetsSent) / _this.statsInterval\n                            };\n                            var units = {\n                                bytesSent: 'bytes',\n                                packetsSent: 'packets'\n                            };\n                            if (stat.mediaType === 'video') {\n                                metrics['framesEncoded'] = (stat.framesEncoded - _this.stats.outbound.video.framesEncoded) / _this.statsInterval;\n                                units['framesEncoded'] = 'frames';\n                                _this.stats.outbound.video.framesEncoded = stat.framesEncoded;\n                            }\n                            _this.stats.outbound[stat.mediaType].bytesSent = stat.bytesSent;\n                            _this.stats.outbound[stat.mediaType].packetsSent = stat.packetsSent;\n                            json = {\n                                '@timestamp': new Date(stat.timestamp).toISOString(),\n                                'exec': instrumentation.exec,\n                                'component': instrumentation.component,\n                                'stream': 'webRtc',\n                                'et_type': metricId,\n                                'stream_type': 'composed_metrics',\n                                'units': units\n                            };\n                            json[metricId] = metrics;\n                            sendPost(JSON.stringify(json));\n                        }\n                    }\n                }\n            }\n        };\n        this.getStatsAgnostic(this.stream.getRTCPeerConnection(), f, function (error) { console.log(error); });\n    };\n    WebRtcStats.prototype.standardizeReport = function (response) {\n        console.log(response);\n        var standardReport = {};\n        if (platform.name.indexOf('Firefox') !== -1) {\n            Object.keys(response).forEach(function (key) {\n                console.log(response[key]);\n            });\n            return response;\n        }\n        response.result().forEach(function (report) {\n            var standardStats = {\n                id: report.id,\n                timestamp: report.timestamp,\n                type: report.type\n            };\n            report.names().forEach(function (name) {\n                standardStats[name] = report.stat(name);\n            });\n            standardReport[standardStats.id] = standardStats;\n        });\n        return standardReport;\n    };\n    WebRtcStats.prototype.getStatsAgnostic = function (pc, successCb, failureCb) {\n        var _this = this;\n        if (platform.name.indexOf('Firefox') !== -1) {\n            // getStats takes args in different order in Chrome and Firefox\n            return pc.getStats(null).then(function (response) {\n                var report = _this.standardizeReport(response);\n                successCb(report);\n            })[\"catch\"](failureCb);\n        }\n        else if ((platform.name.indexOf('Chrome') !== -1) || (platform.name.indexOf('Opera') !== -1)) {\n            // In Chrome, the first two arguments are reversed\n            return pc.getStats(function (response) {\n                var report = _this.standardizeReport(response);\n                successCb(report);\n            }, null, failureCb);\n        }\n    };\n    return WebRtcStats;\n}());\nexports.WebRtcStats = WebRtcStats;\n//# sourceMappingURL=WebRtcStats.js.map"]},"metadata":{},"sourceType":"script"}