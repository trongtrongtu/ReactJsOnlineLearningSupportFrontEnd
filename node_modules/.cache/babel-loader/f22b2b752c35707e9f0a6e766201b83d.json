{"ast":null,"code":"var RpcBuilder = require('../');\n\nvar WebSocketWithReconnection = require('./transports/webSocketWithReconnection');\n\nDate.now = Date.now || function () {\n  return +new Date();\n};\n\nvar PING_INTERVAL = 5000;\nvar RECONNECTING = 'RECONNECTING';\nvar CONNECTED = 'CONNECTED';\nvar DISCONNECTED = 'DISCONNECTED';\nvar Logger = console;\n\nfunction JsonRpcClient(configuration) {\n  var self = this;\n  var wsConfig = configuration.ws;\n  var notReconnectIfNumLessThan = -1;\n  var pingNextNum = 0;\n  var enabledPings = true;\n  var pingPongStarted = false;\n  var pingInterval;\n  var status = DISCONNECTED;\n  var onreconnecting = wsConfig.onreconnecting;\n  var onreconnected = wsConfig.onreconnected;\n  var onconnected = wsConfig.onconnected;\n  var onerror = wsConfig.onerror;\n\n  configuration.rpc.pull = function (params, request) {\n    request.reply(null, \"push\");\n  };\n\n  wsConfig.onreconnecting = function () {\n    Logger.debug(\"--------- ONRECONNECTING -----------\");\n\n    if (status === RECONNECTING) {\n      Logger.error(\"Websocket already in RECONNECTING state when receiving a new ONRECONNECTING message. Ignoring it\");\n      return;\n    }\n\n    stopPing();\n    status = RECONNECTING;\n\n    if (onreconnecting) {\n      onreconnecting();\n    }\n  };\n\n  wsConfig.onreconnected = function () {\n    Logger.debug(\"--------- ONRECONNECTED -----------\");\n\n    if (status === CONNECTED) {\n      Logger.error(\"Websocket already in CONNECTED state when receiving a new ONRECONNECTED message. Ignoring it\");\n      return;\n    }\n\n    status = CONNECTED;\n    updateNotReconnectIfLessThan();\n\n    if (onreconnected) {\n      onreconnected();\n    }\n  };\n\n  wsConfig.onconnected = function () {\n    Logger.debug(\"--------- ONCONNECTED -----------\");\n\n    if (status === CONNECTED) {\n      Logger.error(\"Websocket already in CONNECTED state when receiving a new ONCONNECTED message. Ignoring it\");\n      return;\n    }\n\n    status = CONNECTED;\n    enabledPings = true;\n    usePing();\n\n    if (onconnected) {\n      onconnected();\n    }\n  };\n\n  wsConfig.onerror = function (error) {\n    Logger.debug(\"--------- ONERROR -----------\");\n    status = DISCONNECTED;\n    stopPing();\n\n    if (onerror) {\n      onerror(error);\n    }\n  };\n\n  var ws = new WebSocketWithReconnection(wsConfig);\n  Logger.debug('Connecting websocket to URI: ' + wsConfig.uri);\n  var rpcBuilderOptions = {\n    request_timeout: configuration.rpc.requestTimeout,\n    ping_request_timeout: configuration.rpc.heartbeatRequestTimeout\n  };\n  var rpc = new RpcBuilder(RpcBuilder.packers.JsonRPC, rpcBuilderOptions, ws, function (request) {\n    Logger.debug('Received request: ' + JSON.stringify(request));\n\n    try {\n      var func = configuration.rpc[request.method];\n\n      if (func === undefined) {\n        Logger.error(\"Method \" + request.method + \" not registered in client\");\n      } else {\n        func(request.params, request);\n      }\n    } catch (err) {\n      Logger.error('Exception processing request: ' + JSON.stringify(request));\n      Logger.error(err);\n    }\n  });\n\n  this.send = function (method, params, callback) {\n    if (method !== 'ping') {\n      Logger.debug('Request: method:' + method + \" params:\" + JSON.stringify(params));\n    }\n\n    var requestTime = Date.now();\n    rpc.encode(method, params, function (error, result) {\n      if (error) {\n        try {\n          Logger.error(\"ERROR:\" + error.message + \" in Request: method:\" + method + \" params:\" + JSON.stringify(params) + \" request:\" + error.request);\n\n          if (error.data) {\n            Logger.error(\"ERROR DATA:\" + JSON.stringify(error.data));\n          }\n        } catch (e) {}\n\n        error.requestTime = requestTime;\n      }\n\n      if (callback) {\n        if (result != undefined && result.value !== 'pong') {\n          Logger.debug('Response: ' + JSON.stringify(result));\n        }\n\n        callback(error, result);\n      }\n    });\n  };\n\n  function updateNotReconnectIfLessThan() {\n    Logger.debug(\"notReconnectIfNumLessThan = \" + pingNextNum + ' (old=' + notReconnectIfNumLessThan + ')');\n    notReconnectIfNumLessThan = pingNextNum;\n  }\n\n  function sendPing() {\n    if (enabledPings) {\n      var params = null;\n\n      if (pingNextNum == 0 || pingNextNum == notReconnectIfNumLessThan) {\n        params = {\n          interval: configuration.heartbeat || PING_INTERVAL\n        };\n      }\n\n      pingNextNum++;\n      self.send('ping', params, function (pingNum) {\n        return function (error, result) {\n          if (error) {\n            Logger.debug(\"Error in ping request #\" + pingNum + \" (\" + error.message + \")\");\n\n            if (pingNum > notReconnectIfNumLessThan) {\n              enabledPings = false;\n              updateNotReconnectIfLessThan();\n              Logger.debug(\"Server did not respond to ping message #\" + pingNum + \". Reconnecting... \");\n              ws.reconnectWs();\n            }\n          }\n        };\n      }(pingNextNum));\n    } else {\n      Logger.debug(\"Trying to send ping, but ping is not enabled\");\n    }\n  }\n\n  function usePing() {\n    if (!pingPongStarted) {\n      Logger.debug(\"Starting ping (if configured)\");\n      pingPongStarted = true;\n\n      if (configuration.heartbeat != undefined) {\n        pingInterval = setInterval(sendPing, configuration.heartbeat);\n        sendPing();\n      }\n    }\n  }\n\n  function stopPing() {\n    clearInterval(pingInterval);\n    pingPongStarted = false;\n    enabledPings = false;\n    pingNextNum = -1;\n    rpc.cancel();\n  }\n\n  this.close = function (code, reason) {\n    Logger.debug(\"Closing  with code: \" + code + \" because: \" + reason);\n\n    if (pingInterval != undefined) {\n      Logger.debug(\"Clearing ping interval\");\n      clearInterval(pingInterval);\n    }\n\n    pingPongStarted = false;\n    enabledPings = false;\n\n    if (configuration.sendCloseMessage) {\n      Logger.debug(\"Sending close message\");\n      this.send('closeSession', null, function (error, result) {\n        if (error) {\n          Logger.error(\"Error sending close message: \" + JSON.stringify(error));\n        }\n\n        ws.close(code, reason);\n      });\n    } else {\n      ws.close(code, reason);\n    }\n  };\n\n  this.forceClose = function (millis) {\n    ws.forceClose(millis);\n  };\n\n  this.reconnect = function () {\n    ws.reconnectWs();\n  };\n\n  this.resetPing = function () {\n    enabledPings = true;\n    pingNextNum = 0;\n    usePing();\n  };\n}\n\nmodule.exports = JsonRpcClient;","map":{"version":3,"sources":["../../../../../src/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/jsonrpcclient.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var RpcBuilder = require('../');\nvar WebSocketWithReconnection = require('./transports/webSocketWithReconnection');\nDate.now = Date.now || function () {\n    return +new Date;\n};\nvar PING_INTERVAL = 5000;\nvar RECONNECTING = 'RECONNECTING';\nvar CONNECTED = 'CONNECTED';\nvar DISCONNECTED = 'DISCONNECTED';\nvar Logger = console;\nfunction JsonRpcClient(configuration) {\n    var self = this;\n    var wsConfig = configuration.ws;\n    var notReconnectIfNumLessThan = -1;\n    var pingNextNum = 0;\n    var enabledPings = true;\n    var pingPongStarted = false;\n    var pingInterval;\n    var status = DISCONNECTED;\n    var onreconnecting = wsConfig.onreconnecting;\n    var onreconnected = wsConfig.onreconnected;\n    var onconnected = wsConfig.onconnected;\n    var onerror = wsConfig.onerror;\n    configuration.rpc.pull = function (params, request) {\n        request.reply(null, \"push\");\n    };\n    wsConfig.onreconnecting = function () {\n        Logger.debug(\"--------- ONRECONNECTING -----------\");\n        if (status === RECONNECTING) {\n            Logger.error(\"Websocket already in RECONNECTING state when receiving a new ONRECONNECTING message. Ignoring it\");\n            return;\n        }\n        stopPing();\n        status = RECONNECTING;\n        if (onreconnecting) {\n            onreconnecting();\n        }\n    };\n    wsConfig.onreconnected = function () {\n        Logger.debug(\"--------- ONRECONNECTED -----------\");\n        if (status === CONNECTED) {\n            Logger.error(\"Websocket already in CONNECTED state when receiving a new ONRECONNECTED message. Ignoring it\");\n            return;\n        }\n        status = CONNECTED;\n        updateNotReconnectIfLessThan();\n        if (onreconnected) {\n            onreconnected();\n        }\n    };\n    wsConfig.onconnected = function () {\n        Logger.debug(\"--------- ONCONNECTED -----------\");\n        if (status === CONNECTED) {\n            Logger.error(\"Websocket already in CONNECTED state when receiving a new ONCONNECTED message. Ignoring it\");\n            return;\n        }\n        status = CONNECTED;\n        enabledPings = true;\n        usePing();\n        if (onconnected) {\n            onconnected();\n        }\n    };\n    wsConfig.onerror = function (error) {\n        Logger.debug(\"--------- ONERROR -----------\");\n        status = DISCONNECTED;\n        stopPing();\n        if (onerror) {\n            onerror(error);\n        }\n    };\n    var ws = new WebSocketWithReconnection(wsConfig);\n    Logger.debug('Connecting websocket to URI: ' + wsConfig.uri);\n    var rpcBuilderOptions = {\n        request_timeout: configuration.rpc.requestTimeout,\n        ping_request_timeout: configuration.rpc.heartbeatRequestTimeout\n    };\n    var rpc = new RpcBuilder(RpcBuilder.packers.JsonRPC, rpcBuilderOptions, ws, function (request) {\n        Logger.debug('Received request: ' + JSON.stringify(request));\n        try {\n            var func = configuration.rpc[request.method];\n            if (func === undefined) {\n                Logger.error(\"Method \" + request.method + \" not registered in client\");\n            }\n            else {\n                func(request.params, request);\n            }\n        }\n        catch (err) {\n            Logger.error('Exception processing request: ' + JSON.stringify(request));\n            Logger.error(err);\n        }\n    });\n    this.send = function (method, params, callback) {\n        if (method !== 'ping') {\n            Logger.debug('Request: method:' + method + \" params:\" + JSON.stringify(params));\n        }\n        var requestTime = Date.now();\n        rpc.encode(method, params, function (error, result) {\n            if (error) {\n                try {\n                    Logger.error(\"ERROR:\" + error.message + \" in Request: method:\" +\n                        method + \" params:\" + JSON.stringify(params) + \" request:\" +\n                        error.request);\n                    if (error.data) {\n                        Logger.error(\"ERROR DATA:\" + JSON.stringify(error.data));\n                    }\n                }\n                catch (e) { }\n                error.requestTime = requestTime;\n            }\n            if (callback) {\n                if (result != undefined && result.value !== 'pong') {\n                    Logger.debug('Response: ' + JSON.stringify(result));\n                }\n                callback(error, result);\n            }\n        });\n    };\n    function updateNotReconnectIfLessThan() {\n        Logger.debug(\"notReconnectIfNumLessThan = \" + pingNextNum + ' (old=' +\n            notReconnectIfNumLessThan + ')');\n        notReconnectIfNumLessThan = pingNextNum;\n    }\n    function sendPing() {\n        if (enabledPings) {\n            var params = null;\n            if (pingNextNum == 0 || pingNextNum == notReconnectIfNumLessThan) {\n                params = {\n                    interval: configuration.heartbeat || PING_INTERVAL\n                };\n            }\n            pingNextNum++;\n            self.send('ping', params, (function (pingNum) {\n                return function (error, result) {\n                    if (error) {\n                        Logger.debug(\"Error in ping request #\" + pingNum + \" (\" +\n                            error.message + \")\");\n                        if (pingNum > notReconnectIfNumLessThan) {\n                            enabledPings = false;\n                            updateNotReconnectIfLessThan();\n                            Logger.debug(\"Server did not respond to ping message #\" +\n                                pingNum + \". Reconnecting... \");\n                            ws.reconnectWs();\n                        }\n                    }\n                };\n            })(pingNextNum));\n        }\n        else {\n            Logger.debug(\"Trying to send ping, but ping is not enabled\");\n        }\n    }\n    function usePing() {\n        if (!pingPongStarted) {\n            Logger.debug(\"Starting ping (if configured)\");\n            pingPongStarted = true;\n            if (configuration.heartbeat != undefined) {\n                pingInterval = setInterval(sendPing, configuration.heartbeat);\n                sendPing();\n            }\n        }\n    }\n    function stopPing() {\n        clearInterval(pingInterval);\n        pingPongStarted = false;\n        enabledPings = false;\n        pingNextNum = -1;\n        rpc.cancel();\n    }\n    this.close = function (code, reason) {\n        Logger.debug(\"Closing  with code: \" + code + \" because: \" + reason);\n        if (pingInterval != undefined) {\n            Logger.debug(\"Clearing ping interval\");\n            clearInterval(pingInterval);\n        }\n        pingPongStarted = false;\n        enabledPings = false;\n        if (configuration.sendCloseMessage) {\n            Logger.debug(\"Sending close message\");\n            this.send('closeSession', null, function (error, result) {\n                if (error) {\n                    Logger.error(\"Error sending close message: \" + JSON.stringify(error));\n                }\n                ws.close(code, reason);\n            });\n        }\n        else {\n            ws.close(code, reason);\n        }\n    };\n    this.forceClose = function (millis) {\n        ws.forceClose(millis);\n    };\n    this.reconnect = function () {\n        ws.reconnectWs();\n    };\n    this.resetPing = function () {\n        enabledPings = true;\n        pingNextNum = 0;\n        usePing();\n    };\n}\nmodule.exports = JsonRpcClient;\n//# sourceMappingURL=jsonrpcclient.js.map"]},"metadata":{},"sourceType":"script"}