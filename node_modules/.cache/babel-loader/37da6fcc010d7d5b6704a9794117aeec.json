{"ast":null,"code":"\"use strict\";\n\nvar Logger = console;\nvar MAX_RETRIES = 2000;\nvar RETRY_TIME_MS = 3000;\nvar CONNECTING = 0;\nvar OPEN = 1;\nvar CLOSING = 2;\nvar CLOSED = 3;\n\nfunction WebSocketWithReconnection(config) {\n  var closing = false;\n  var registerMessageHandler;\n  var wsUri = config.uri;\n  var reconnecting = false;\n  var ws = new WebSocket(wsUri);\n\n  ws.onopen = function () {\n    Logger.debug(\"WebSocket connected to \" + wsUri);\n\n    if (config.onconnected) {\n      config.onconnected();\n    }\n  };\n\n  ws.onerror = function (error) {\n    Logger.error(\"Could not connect to \" + wsUri + \" (invoking onerror if defined)\", error);\n\n    if (config.onerror) {\n      config.onerror(error);\n    }\n  };\n\n  var reconnectionOnClose = function reconnectionOnClose() {\n    if (ws.readyState === CLOSED) {\n      if (closing) {\n        Logger.debug(\"Connection closed by user\");\n      } else {\n        Logger.debug(\"Connection closed unexpectecly. Reconnecting...\");\n        reconnect(MAX_RETRIES, 1);\n      }\n    } else {\n      Logger.debug(\"Close callback from previous websocket. Ignoring it\");\n    }\n  };\n\n  ws.onclose = reconnectionOnClose;\n\n  function reconnect(maxRetries, numRetries) {\n    Logger.debug(\"reconnect (attempt #\" + numRetries + \", max=\" + maxRetries + \")\");\n\n    if (numRetries === 1) {\n      if (reconnecting) {\n        Logger.warn(\"Trying to reconnect when already reconnecting... Ignoring this reconnection.\");\n        return;\n      } else {\n        reconnecting = true;\n      }\n\n      if (config.onreconnecting) {\n        config.onreconnecting();\n      }\n    }\n\n    reconnectAux(maxRetries, numRetries);\n  }\n\n  function reconnectAux(maxRetries, numRetries) {\n    Logger.debug(\"Reconnection attempt #\" + numRetries);\n    ws.close();\n    ws = new WebSocket(wsUri);\n\n    ws.onopen = function () {\n      Logger.debug(\"Reconnected to \" + wsUri + \" after \" + numRetries + \" attempts...\");\n      reconnecting = false;\n      registerMessageHandler();\n\n      if (config.onreconnected()) {\n        config.onreconnected();\n      }\n\n      ws.onclose = reconnectionOnClose;\n    };\n\n    ws.onerror = function (error) {\n      Logger.warn(\"Reconnection error: \", error);\n\n      if (numRetries === maxRetries) {\n        if (config.ondisconnect) {\n          config.ondisconnect();\n        }\n      } else {\n        setTimeout(function () {\n          reconnect(maxRetries, numRetries + 1);\n        }, RETRY_TIME_MS);\n      }\n    };\n  }\n\n  this.close = function () {\n    closing = true;\n    ws.close();\n  };\n\n  this.reconnectWs = function () {\n    Logger.debug(\"reconnectWs\");\n    reconnect(MAX_RETRIES, 1);\n  };\n\n  this.send = function (message) {\n    ws.send(message);\n  };\n\n  this.addEventListener = function (type, callback) {\n    registerMessageHandler = function registerMessageHandler() {\n      ws.addEventListener(type, callback);\n    };\n\n    registerMessageHandler();\n  };\n}\n\nmodule.exports = WebSocketWithReconnection;","map":{"version":3,"sources":["../../../../../../src/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/transports/webSocketWithReconnection.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar Logger = console;\nvar MAX_RETRIES = 2000;\nvar RETRY_TIME_MS = 3000;\nvar CONNECTING = 0;\nvar OPEN = 1;\nvar CLOSING = 2;\nvar CLOSED = 3;\nfunction WebSocketWithReconnection(config) {\n    var closing = false;\n    var registerMessageHandler;\n    var wsUri = config.uri;\n    var reconnecting = false;\n    var ws = new WebSocket(wsUri);\n    ws.onopen = function () {\n        Logger.debug(\"WebSocket connected to \" + wsUri);\n        if (config.onconnected) {\n            config.onconnected();\n        }\n    };\n    ws.onerror = function (error) {\n        Logger.error(\"Could not connect to \" + wsUri + \" (invoking onerror if defined)\", error);\n        if (config.onerror) {\n            config.onerror(error);\n        }\n    };\n    var reconnectionOnClose = function () {\n        if (ws.readyState === CLOSED) {\n            if (closing) {\n                Logger.debug(\"Connection closed by user\");\n            }\n            else {\n                Logger.debug(\"Connection closed unexpectecly. Reconnecting...\");\n                reconnect(MAX_RETRIES, 1);\n            }\n        }\n        else {\n            Logger.debug(\"Close callback from previous websocket. Ignoring it\");\n        }\n    };\n    ws.onclose = reconnectionOnClose;\n    function reconnect(maxRetries, numRetries) {\n        Logger.debug(\"reconnect (attempt #\" + numRetries + \", max=\" + maxRetries + \")\");\n        if (numRetries === 1) {\n            if (reconnecting) {\n                Logger.warn(\"Trying to reconnect when already reconnecting... Ignoring this reconnection.\");\n                return;\n            }\n            else {\n                reconnecting = true;\n            }\n            if (config.onreconnecting) {\n                config.onreconnecting();\n            }\n        }\n        reconnectAux(maxRetries, numRetries);\n    }\n    function reconnectAux(maxRetries, numRetries) {\n        Logger.debug(\"Reconnection attempt #\" + numRetries);\n        ws.close();\n        ws = new WebSocket(wsUri);\n        ws.onopen = function () {\n            Logger.debug(\"Reconnected to \" + wsUri + \" after \" + numRetries + \" attempts...\");\n            reconnecting = false;\n            registerMessageHandler();\n            if (config.onreconnected()) {\n                config.onreconnected();\n            }\n            ws.onclose = reconnectionOnClose;\n        };\n        ws.onerror = function (error) {\n            Logger.warn(\"Reconnection error: \", error);\n            if (numRetries === maxRetries) {\n                if (config.ondisconnect) {\n                    config.ondisconnect();\n                }\n            }\n            else {\n                setTimeout(function () {\n                    reconnect(maxRetries, numRetries + 1);\n                }, RETRY_TIME_MS);\n            }\n        };\n    }\n    this.close = function () {\n        closing = true;\n        ws.close();\n    };\n    this.reconnectWs = function () {\n        Logger.debug(\"reconnectWs\");\n        reconnect(MAX_RETRIES, 1);\n    };\n    this.send = function (message) {\n        ws.send(message);\n    };\n    this.addEventListener = function (type, callback) {\n        registerMessageHandler = function () {\n            ws.addEventListener(type, callback);\n        };\n        registerMessageHandler();\n    };\n}\nmodule.exports = WebSocketWithReconnection;\n//# sourceMappingURL=webSocketWithReconnection.js.map"]},"metadata":{},"sourceType":"script"}